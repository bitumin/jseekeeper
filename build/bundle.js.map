{"version":3,"file":"bundle.js","sources":["../../node_modules/svelte/internal/index.mjs","../../src/data/fields.js","../../src/utils/time.js","../../src/lib/GamV20HexEditor.js","../../src/data/portraits.js","../../src/data/genders.js","../../src/data/races.js","../../src/data/alignments.js","../../src/data/classes.js","../../src/data/kits.js","../../src/data/eas.js","../../src/data/proficiencies.js","../../src/App.svelte","../../src/main.js"],"sourcesContent":["function noop() { }\nconst identity = x => x;\nfunction assign(tar, src) {\n    // @ts-ignore\n    for (const k in src)\n        tar[k] = src[k];\n    return tar;\n}\nfunction is_promise(value) {\n    return value && typeof value === 'object' && typeof value.then === 'function';\n}\nfunction add_location(element, file, line, column, char) {\n    element.__svelte_meta = {\n        loc: { file, line, column, char }\n    };\n}\nfunction run(fn) {\n    return fn();\n}\nfunction blank_object() {\n    return Object.create(null);\n}\nfunction run_all(fns) {\n    fns.forEach(run);\n}\nfunction is_function(thing) {\n    return typeof thing === 'function';\n}\nfunction safe_not_equal(a, b) {\n    return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');\n}\nlet src_url_equal_anchor;\nfunction src_url_equal(element_src, url) {\n    if (!src_url_equal_anchor) {\n        src_url_equal_anchor = document.createElement('a');\n    }\n    src_url_equal_anchor.href = url;\n    return element_src === src_url_equal_anchor.href;\n}\nfunction not_equal(a, b) {\n    return a != a ? b == b : a !== b;\n}\nfunction is_empty(obj) {\n    return Object.keys(obj).length === 0;\n}\nfunction validate_store(store, name) {\n    if (store != null && typeof store.subscribe !== 'function') {\n        throw new Error(`'${name}' is not a store with a 'subscribe' method`);\n    }\n}\nfunction subscribe(store, ...callbacks) {\n    if (store == null) {\n        return noop;\n    }\n    const unsub = store.subscribe(...callbacks);\n    return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;\n}\nfunction get_store_value(store) {\n    let value;\n    subscribe(store, _ => value = _)();\n    return value;\n}\nfunction component_subscribe(component, store, callback) {\n    component.$$.on_destroy.push(subscribe(store, callback));\n}\nfunction create_slot(definition, ctx, $$scope, fn) {\n    if (definition) {\n        const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);\n        return definition[0](slot_ctx);\n    }\n}\nfunction get_slot_context(definition, ctx, $$scope, fn) {\n    return definition[1] && fn\n        ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))\n        : $$scope.ctx;\n}\nfunction get_slot_changes(definition, $$scope, dirty, fn) {\n    if (definition[2] && fn) {\n        const lets = definition[2](fn(dirty));\n        if ($$scope.dirty === undefined) {\n            return lets;\n        }\n        if (typeof lets === 'object') {\n            const merged = [];\n            const len = Math.max($$scope.dirty.length, lets.length);\n            for (let i = 0; i < len; i += 1) {\n                merged[i] = $$scope.dirty[i] | lets[i];\n            }\n            return merged;\n        }\n        return $$scope.dirty | lets;\n    }\n    return $$scope.dirty;\n}\nfunction update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn) {\n    if (slot_changes) {\n        const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);\n        slot.p(slot_context, slot_changes);\n    }\n}\nfunction update_slot(slot, slot_definition, ctx, $$scope, dirty, get_slot_changes_fn, get_slot_context_fn) {\n    const slot_changes = get_slot_changes(slot_definition, $$scope, dirty, get_slot_changes_fn);\n    update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn);\n}\nfunction get_all_dirty_from_scope($$scope) {\n    if ($$scope.ctx.length > 32) {\n        const dirty = [];\n        const length = $$scope.ctx.length / 32;\n        for (let i = 0; i < length; i++) {\n            dirty[i] = -1;\n        }\n        return dirty;\n    }\n    return -1;\n}\nfunction exclude_internal_props(props) {\n    const result = {};\n    for (const k in props)\n        if (k[0] !== '$')\n            result[k] = props[k];\n    return result;\n}\nfunction compute_rest_props(props, keys) {\n    const rest = {};\n    keys = new Set(keys);\n    for (const k in props)\n        if (!keys.has(k) && k[0] !== '$')\n            rest[k] = props[k];\n    return rest;\n}\nfunction compute_slots(slots) {\n    const result = {};\n    for (const key in slots) {\n        result[key] = true;\n    }\n    return result;\n}\nfunction once(fn) {\n    let ran = false;\n    return function (...args) {\n        if (ran)\n            return;\n        ran = true;\n        fn.call(this, ...args);\n    };\n}\nfunction null_to_empty(value) {\n    return value == null ? '' : value;\n}\nfunction set_store_value(store, ret, value) {\n    store.set(value);\n    return ret;\n}\nconst has_prop = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop);\nfunction action_destroyer(action_result) {\n    return action_result && is_function(action_result.destroy) ? action_result.destroy : noop;\n}\n\nconst is_client = typeof window !== 'undefined';\nlet now = is_client\n    ? () => window.performance.now()\n    : () => Date.now();\nlet raf = is_client ? cb => requestAnimationFrame(cb) : noop;\n// used internally for testing\nfunction set_now(fn) {\n    now = fn;\n}\nfunction set_raf(fn) {\n    raf = fn;\n}\n\nconst tasks = new Set();\nfunction run_tasks(now) {\n    tasks.forEach(task => {\n        if (!task.c(now)) {\n            tasks.delete(task);\n            task.f();\n        }\n    });\n    if (tasks.size !== 0)\n        raf(run_tasks);\n}\n/**\n * For testing purposes only!\n */\nfunction clear_loops() {\n    tasks.clear();\n}\n/**\n * Creates a new task that runs on each raf frame\n * until it returns a falsy value or is aborted\n */\nfunction loop(callback) {\n    let task;\n    if (tasks.size === 0)\n        raf(run_tasks);\n    return {\n        promise: new Promise(fulfill => {\n            tasks.add(task = { c: callback, f: fulfill });\n        }),\n        abort() {\n            tasks.delete(task);\n        }\n    };\n}\n\n// Track which nodes are claimed during hydration. Unclaimed nodes can then be removed from the DOM\n// at the end of hydration without touching the remaining nodes.\nlet is_hydrating = false;\nfunction start_hydrating() {\n    is_hydrating = true;\n}\nfunction end_hydrating() {\n    is_hydrating = false;\n}\nfunction upper_bound(low, high, key, value) {\n    // Return first index of value larger than input value in the range [low, high)\n    while (low < high) {\n        const mid = low + ((high - low) >> 1);\n        if (key(mid) <= value) {\n            low = mid + 1;\n        }\n        else {\n            high = mid;\n        }\n    }\n    return low;\n}\nfunction init_hydrate(target) {\n    if (target.hydrate_init)\n        return;\n    target.hydrate_init = true;\n    // We know that all children have claim_order values since the unclaimed have been detached if target is not <head>\n    let children = target.childNodes;\n    // If target is <head>, there may be children without claim_order\n    if (target.nodeName === 'HEAD') {\n        const myChildren = [];\n        for (let i = 0; i < children.length; i++) {\n            const node = children[i];\n            if (node.claim_order !== undefined) {\n                myChildren.push(node);\n            }\n        }\n        children = myChildren;\n    }\n    /*\n    * Reorder claimed children optimally.\n    * We can reorder claimed children optimally by finding the longest subsequence of\n    * nodes that are already claimed in order and only moving the rest. The longest\n    * subsequence subsequence of nodes that are claimed in order can be found by\n    * computing the longest increasing subsequence of .claim_order values.\n    *\n    * This algorithm is optimal in generating the least amount of reorder operations\n    * possible.\n    *\n    * Proof:\n    * We know that, given a set of reordering operations, the nodes that do not move\n    * always form an increasing subsequence, since they do not move among each other\n    * meaning that they must be already ordered among each other. Thus, the maximal\n    * set of nodes that do not move form a longest increasing subsequence.\n    */\n    // Compute longest increasing subsequence\n    // m: subsequence length j => index k of smallest value that ends an increasing subsequence of length j\n    const m = new Int32Array(children.length + 1);\n    // Predecessor indices + 1\n    const p = new Int32Array(children.length);\n    m[0] = -1;\n    let longest = 0;\n    for (let i = 0; i < children.length; i++) {\n        const current = children[i].claim_order;\n        // Find the largest subsequence length such that it ends in a value less than our current value\n        // upper_bound returns first greater value, so we subtract one\n        // with fast path for when we are on the current longest subsequence\n        const seqLen = ((longest > 0 && children[m[longest]].claim_order <= current) ? longest + 1 : upper_bound(1, longest, idx => children[m[idx]].claim_order, current)) - 1;\n        p[i] = m[seqLen] + 1;\n        const newLen = seqLen + 1;\n        // We can guarantee that current is the smallest value. Otherwise, we would have generated a longer sequence.\n        m[newLen] = i;\n        longest = Math.max(newLen, longest);\n    }\n    // The longest increasing subsequence of nodes (initially reversed)\n    const lis = [];\n    // The rest of the nodes, nodes that will be moved\n    const toMove = [];\n    let last = children.length - 1;\n    for (let cur = m[longest] + 1; cur != 0; cur = p[cur - 1]) {\n        lis.push(children[cur - 1]);\n        for (; last >= cur; last--) {\n            toMove.push(children[last]);\n        }\n        last--;\n    }\n    for (; last >= 0; last--) {\n        toMove.push(children[last]);\n    }\n    lis.reverse();\n    // We sort the nodes being moved to guarantee that their insertion order matches the claim order\n    toMove.sort((a, b) => a.claim_order - b.claim_order);\n    // Finally, we move the nodes\n    for (let i = 0, j = 0; i < toMove.length; i++) {\n        while (j < lis.length && toMove[i].claim_order >= lis[j].claim_order) {\n            j++;\n        }\n        const anchor = j < lis.length ? lis[j] : null;\n        target.insertBefore(toMove[i], anchor);\n    }\n}\nfunction append(target, node) {\n    target.appendChild(node);\n}\nfunction append_styles(target, style_sheet_id, styles) {\n    const append_styles_to = get_root_for_style(target);\n    if (!append_styles_to.getElementById(style_sheet_id)) {\n        const style = element('style');\n        style.id = style_sheet_id;\n        style.textContent = styles;\n        append_stylesheet(append_styles_to, style);\n    }\n}\nfunction get_root_for_style(node) {\n    if (!node)\n        return document;\n    const root = node.getRootNode ? node.getRootNode() : node.ownerDocument;\n    if (root && root.host) {\n        return root;\n    }\n    return node.ownerDocument;\n}\nfunction append_empty_stylesheet(node) {\n    const style_element = element('style');\n    append_stylesheet(get_root_for_style(node), style_element);\n    return style_element.sheet;\n}\nfunction append_stylesheet(node, style) {\n    append(node.head || node, style);\n}\nfunction append_hydration(target, node) {\n    if (is_hydrating) {\n        init_hydrate(target);\n        if ((target.actual_end_child === undefined) || ((target.actual_end_child !== null) && (target.actual_end_child.parentElement !== target))) {\n            target.actual_end_child = target.firstChild;\n        }\n        // Skip nodes of undefined ordering\n        while ((target.actual_end_child !== null) && (target.actual_end_child.claim_order === undefined)) {\n            target.actual_end_child = target.actual_end_child.nextSibling;\n        }\n        if (node !== target.actual_end_child) {\n            // We only insert if the ordering of this node should be modified or the parent node is not target\n            if (node.claim_order !== undefined || node.parentNode !== target) {\n                target.insertBefore(node, target.actual_end_child);\n            }\n        }\n        else {\n            target.actual_end_child = node.nextSibling;\n        }\n    }\n    else if (node.parentNode !== target || node.nextSibling !== null) {\n        target.appendChild(node);\n    }\n}\nfunction insert(target, node, anchor) {\n    target.insertBefore(node, anchor || null);\n}\nfunction insert_hydration(target, node, anchor) {\n    if (is_hydrating && !anchor) {\n        append_hydration(target, node);\n    }\n    else if (node.parentNode !== target || node.nextSibling != anchor) {\n        target.insertBefore(node, anchor || null);\n    }\n}\nfunction detach(node) {\n    node.parentNode.removeChild(node);\n}\nfunction destroy_each(iterations, detaching) {\n    for (let i = 0; i < iterations.length; i += 1) {\n        if (iterations[i])\n            iterations[i].d(detaching);\n    }\n}\nfunction element(name) {\n    return document.createElement(name);\n}\nfunction element_is(name, is) {\n    return document.createElement(name, { is });\n}\nfunction object_without_properties(obj, exclude) {\n    const target = {};\n    for (const k in obj) {\n        if (has_prop(obj, k)\n            // @ts-ignore\n            && exclude.indexOf(k) === -1) {\n            // @ts-ignore\n            target[k] = obj[k];\n        }\n    }\n    return target;\n}\nfunction svg_element(name) {\n    return document.createElementNS('http://www.w3.org/2000/svg', name);\n}\nfunction text(data) {\n    return document.createTextNode(data);\n}\nfunction space() {\n    return text(' ');\n}\nfunction empty() {\n    return text('');\n}\nfunction listen(node, event, handler, options) {\n    node.addEventListener(event, handler, options);\n    return () => node.removeEventListener(event, handler, options);\n}\nfunction prevent_default(fn) {\n    return function (event) {\n        event.preventDefault();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction stop_propagation(fn) {\n    return function (event) {\n        event.stopPropagation();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction self(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.target === this)\n            fn.call(this, event);\n    };\n}\nfunction trusted(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.isTrusted)\n            fn.call(this, event);\n    };\n}\nfunction attr(node, attribute, value) {\n    if (value == null)\n        node.removeAttribute(attribute);\n    else if (node.getAttribute(attribute) !== value)\n        node.setAttribute(attribute, value);\n}\nfunction set_attributes(node, attributes) {\n    // @ts-ignore\n    const descriptors = Object.getOwnPropertyDescriptors(node.__proto__);\n    for (const key in attributes) {\n        if (attributes[key] == null) {\n            node.removeAttribute(key);\n        }\n        else if (key === 'style') {\n            node.style.cssText = attributes[key];\n        }\n        else if (key === '__value') {\n            node.value = node[key] = attributes[key];\n        }\n        else if (descriptors[key] && descriptors[key].set) {\n            node[key] = attributes[key];\n        }\n        else {\n            attr(node, key, attributes[key]);\n        }\n    }\n}\nfunction set_svg_attributes(node, attributes) {\n    for (const key in attributes) {\n        attr(node, key, attributes[key]);\n    }\n}\nfunction set_custom_element_data(node, prop, value) {\n    if (prop in node) {\n        node[prop] = typeof node[prop] === 'boolean' && value === '' ? true : value;\n    }\n    else {\n        attr(node, prop, value);\n    }\n}\nfunction xlink_attr(node, attribute, value) {\n    node.setAttributeNS('http://www.w3.org/1999/xlink', attribute, value);\n}\nfunction get_binding_group_value(group, __value, checked) {\n    const value = new Set();\n    for (let i = 0; i < group.length; i += 1) {\n        if (group[i].checked)\n            value.add(group[i].__value);\n    }\n    if (!checked) {\n        value.delete(__value);\n    }\n    return Array.from(value);\n}\nfunction to_number(value) {\n    return value === '' ? null : +value;\n}\nfunction time_ranges_to_array(ranges) {\n    const array = [];\n    for (let i = 0; i < ranges.length; i += 1) {\n        array.push({ start: ranges.start(i), end: ranges.end(i) });\n    }\n    return array;\n}\nfunction children(element) {\n    return Array.from(element.childNodes);\n}\nfunction init_claim_info(nodes) {\n    if (nodes.claim_info === undefined) {\n        nodes.claim_info = { last_index: 0, total_claimed: 0 };\n    }\n}\nfunction claim_node(nodes, predicate, processNode, createNode, dontUpdateLastIndex = false) {\n    // Try to find nodes in an order such that we lengthen the longest increasing subsequence\n    init_claim_info(nodes);\n    const resultNode = (() => {\n        // We first try to find an element after the previous one\n        for (let i = nodes.claim_info.last_index; i < nodes.length; i++) {\n            const node = nodes[i];\n            if (predicate(node)) {\n                const replacement = processNode(node);\n                if (replacement === undefined) {\n                    nodes.splice(i, 1);\n                }\n                else {\n                    nodes[i] = replacement;\n                }\n                if (!dontUpdateLastIndex) {\n                    nodes.claim_info.last_index = i;\n                }\n                return node;\n            }\n        }\n        // Otherwise, we try to find one before\n        // We iterate in reverse so that we don't go too far back\n        for (let i = nodes.claim_info.last_index - 1; i >= 0; i--) {\n            const node = nodes[i];\n            if (predicate(node)) {\n                const replacement = processNode(node);\n                if (replacement === undefined) {\n                    nodes.splice(i, 1);\n                }\n                else {\n                    nodes[i] = replacement;\n                }\n                if (!dontUpdateLastIndex) {\n                    nodes.claim_info.last_index = i;\n                }\n                else if (replacement === undefined) {\n                    // Since we spliced before the last_index, we decrease it\n                    nodes.claim_info.last_index--;\n                }\n                return node;\n            }\n        }\n        // If we can't find any matching node, we create a new one\n        return createNode();\n    })();\n    resultNode.claim_order = nodes.claim_info.total_claimed;\n    nodes.claim_info.total_claimed += 1;\n    return resultNode;\n}\nfunction claim_element_base(nodes, name, attributes, create_element) {\n    return claim_node(nodes, (node) => node.nodeName === name, (node) => {\n        const remove = [];\n        for (let j = 0; j < node.attributes.length; j++) {\n            const attribute = node.attributes[j];\n            if (!attributes[attribute.name]) {\n                remove.push(attribute.name);\n            }\n        }\n        remove.forEach(v => node.removeAttribute(v));\n        return undefined;\n    }, () => create_element(name));\n}\nfunction claim_element(nodes, name, attributes) {\n    return claim_element_base(nodes, name, attributes, element);\n}\nfunction claim_svg_element(nodes, name, attributes) {\n    return claim_element_base(nodes, name, attributes, svg_element);\n}\nfunction claim_text(nodes, data) {\n    return claim_node(nodes, (node) => node.nodeType === 3, (node) => {\n        const dataStr = '' + data;\n        if (node.data.startsWith(dataStr)) {\n            if (node.data.length !== dataStr.length) {\n                return node.splitText(dataStr.length);\n            }\n        }\n        else {\n            node.data = dataStr;\n        }\n    }, () => text(data), true // Text nodes should not update last index since it is likely not worth it to eliminate an increasing subsequence of actual elements\n    );\n}\nfunction claim_space(nodes) {\n    return claim_text(nodes, ' ');\n}\nfunction find_comment(nodes, text, start) {\n    for (let i = start; i < nodes.length; i += 1) {\n        const node = nodes[i];\n        if (node.nodeType === 8 /* comment node */ && node.textContent.trim() === text) {\n            return i;\n        }\n    }\n    return nodes.length;\n}\nfunction claim_html_tag(nodes) {\n    // find html opening tag\n    const start_index = find_comment(nodes, 'HTML_TAG_START', 0);\n    const end_index = find_comment(nodes, 'HTML_TAG_END', start_index);\n    if (start_index === end_index) {\n        return new HtmlTagHydration();\n    }\n    init_claim_info(nodes);\n    const html_tag_nodes = nodes.splice(start_index, end_index - start_index + 1);\n    detach(html_tag_nodes[0]);\n    detach(html_tag_nodes[html_tag_nodes.length - 1]);\n    const claimed_nodes = html_tag_nodes.slice(1, html_tag_nodes.length - 1);\n    for (const n of claimed_nodes) {\n        n.claim_order = nodes.claim_info.total_claimed;\n        nodes.claim_info.total_claimed += 1;\n    }\n    return new HtmlTagHydration(claimed_nodes);\n}\nfunction set_data(text, data) {\n    data = '' + data;\n    if (text.wholeText !== data)\n        text.data = data;\n}\nfunction set_input_value(input, value) {\n    input.value = value == null ? '' : value;\n}\nfunction set_input_type(input, type) {\n    try {\n        input.type = type;\n    }\n    catch (e) {\n        // do nothing\n    }\n}\nfunction set_style(node, key, value, important) {\n    if (value === null) {\n        node.style.removeProperty(key);\n    }\n    else {\n        node.style.setProperty(key, value, important ? 'important' : '');\n    }\n}\nfunction select_option(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        if (option.__value === value) {\n            option.selected = true;\n            return;\n        }\n    }\n    select.selectedIndex = -1; // no option should be selected\n}\nfunction select_options(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        option.selected = ~value.indexOf(option.__value);\n    }\n}\nfunction select_value(select) {\n    const selected_option = select.querySelector(':checked') || select.options[0];\n    return selected_option && selected_option.__value;\n}\nfunction select_multiple_value(select) {\n    return [].map.call(select.querySelectorAll(':checked'), option => option.__value);\n}\n// unfortunately this can't be a constant as that wouldn't be tree-shakeable\n// so we cache the result instead\nlet crossorigin;\nfunction is_crossorigin() {\n    if (crossorigin === undefined) {\n        crossorigin = false;\n        try {\n            if (typeof window !== 'undefined' && window.parent) {\n                void window.parent.document;\n            }\n        }\n        catch (error) {\n            crossorigin = true;\n        }\n    }\n    return crossorigin;\n}\nfunction add_resize_listener(node, fn) {\n    const computed_style = getComputedStyle(node);\n    if (computed_style.position === 'static') {\n        node.style.position = 'relative';\n    }\n    const iframe = element('iframe');\n    iframe.setAttribute('style', 'display: block; position: absolute; top: 0; left: 0; width: 100%; height: 100%; ' +\n        'overflow: hidden; border: 0; opacity: 0; pointer-events: none; z-index: -1;');\n    iframe.setAttribute('aria-hidden', 'true');\n    iframe.tabIndex = -1;\n    const crossorigin = is_crossorigin();\n    let unsubscribe;\n    if (crossorigin) {\n        iframe.src = \"data:text/html,<script>onresize=function(){parent.postMessage(0,'*')}</script>\";\n        unsubscribe = listen(window, 'message', (event) => {\n            if (event.source === iframe.contentWindow)\n                fn();\n        });\n    }\n    else {\n        iframe.src = 'about:blank';\n        iframe.onload = () => {\n            unsubscribe = listen(iframe.contentWindow, 'resize', fn);\n        };\n    }\n    append(node, iframe);\n    return () => {\n        if (crossorigin) {\n            unsubscribe();\n        }\n        else if (unsubscribe && iframe.contentWindow) {\n            unsubscribe();\n        }\n        detach(iframe);\n    };\n}\nfunction toggle_class(element, name, toggle) {\n    element.classList[toggle ? 'add' : 'remove'](name);\n}\nfunction custom_event(type, detail, bubbles = false) {\n    const e = document.createEvent('CustomEvent');\n    e.initCustomEvent(type, bubbles, false, detail);\n    return e;\n}\nfunction query_selector_all(selector, parent = document.body) {\n    return Array.from(parent.querySelectorAll(selector));\n}\nclass HtmlTag {\n    constructor() {\n        this.e = this.n = null;\n    }\n    c(html) {\n        this.h(html);\n    }\n    m(html, target, anchor = null) {\n        if (!this.e) {\n            this.e = element(target.nodeName);\n            this.t = target;\n            this.c(html);\n        }\n        this.i(anchor);\n    }\n    h(html) {\n        this.e.innerHTML = html;\n        this.n = Array.from(this.e.childNodes);\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert(this.t, this.n[i], anchor);\n        }\n    }\n    p(html) {\n        this.d();\n        this.h(html);\n        this.i(this.a);\n    }\n    d() {\n        this.n.forEach(detach);\n    }\n}\nclass HtmlTagHydration extends HtmlTag {\n    constructor(claimed_nodes) {\n        super();\n        this.e = this.n = null;\n        this.l = claimed_nodes;\n    }\n    c(html) {\n        if (this.l) {\n            this.n = this.l;\n        }\n        else {\n            super.c(html);\n        }\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert_hydration(this.t, this.n[i], anchor);\n        }\n    }\n}\nfunction attribute_to_object(attributes) {\n    const result = {};\n    for (const attribute of attributes) {\n        result[attribute.name] = attribute.value;\n    }\n    return result;\n}\nfunction get_custom_elements_slots(element) {\n    const result = {};\n    element.childNodes.forEach((node) => {\n        result[node.slot || 'default'] = true;\n    });\n    return result;\n}\n\n// we need to store the information for multiple documents because a Svelte application could also contain iframes\n// https://github.com/sveltejs/svelte/issues/3624\nconst managed_styles = new Map();\nlet active = 0;\n// https://github.com/darkskyapp/string-hash/blob/master/index.js\nfunction hash(str) {\n    let hash = 5381;\n    let i = str.length;\n    while (i--)\n        hash = ((hash << 5) - hash) ^ str.charCodeAt(i);\n    return hash >>> 0;\n}\nfunction create_style_information(doc, node) {\n    const info = { stylesheet: append_empty_stylesheet(node), rules: {} };\n    managed_styles.set(doc, info);\n    return info;\n}\nfunction create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {\n    const step = 16.666 / duration;\n    let keyframes = '{\\n';\n    for (let p = 0; p <= 1; p += step) {\n        const t = a + (b - a) * ease(p);\n        keyframes += p * 100 + `%{${fn(t, 1 - t)}}\\n`;\n    }\n    const rule = keyframes + `100% {${fn(b, 1 - b)}}\\n}`;\n    const name = `__svelte_${hash(rule)}_${uid}`;\n    const doc = get_root_for_style(node);\n    const { stylesheet, rules } = managed_styles.get(doc) || create_style_information(doc, node);\n    if (!rules[name]) {\n        rules[name] = true;\n        stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);\n    }\n    const animation = node.style.animation || '';\n    node.style.animation = `${animation ? `${animation}, ` : ''}${name} ${duration}ms linear ${delay}ms 1 both`;\n    active += 1;\n    return name;\n}\nfunction delete_rule(node, name) {\n    const previous = (node.style.animation || '').split(', ');\n    const next = previous.filter(name\n        ? anim => anim.indexOf(name) < 0 // remove specific animation\n        : anim => anim.indexOf('__svelte') === -1 // remove all Svelte animations\n    );\n    const deleted = previous.length - next.length;\n    if (deleted) {\n        node.style.animation = next.join(', ');\n        active -= deleted;\n        if (!active)\n            clear_rules();\n    }\n}\nfunction clear_rules() {\n    raf(() => {\n        if (active)\n            return;\n        managed_styles.forEach(info => {\n            const { stylesheet } = info;\n            let i = stylesheet.cssRules.length;\n            while (i--)\n                stylesheet.deleteRule(i);\n            info.rules = {};\n        });\n        managed_styles.clear();\n    });\n}\n\nfunction create_animation(node, from, fn, params) {\n    if (!from)\n        return noop;\n    const to = node.getBoundingClientRect();\n    if (from.left === to.left && from.right === to.right && from.top === to.top && from.bottom === to.bottom)\n        return noop;\n    const { delay = 0, duration = 300, easing = identity, \n    // @ts-ignore todo: should this be separated from destructuring? Or start/end added to public api and documentation?\n    start: start_time = now() + delay, \n    // @ts-ignore todo:\n    end = start_time + duration, tick = noop, css } = fn(node, { from, to }, params);\n    let running = true;\n    let started = false;\n    let name;\n    function start() {\n        if (css) {\n            name = create_rule(node, 0, 1, duration, delay, easing, css);\n        }\n        if (!delay) {\n            started = true;\n        }\n    }\n    function stop() {\n        if (css)\n            delete_rule(node, name);\n        running = false;\n    }\n    loop(now => {\n        if (!started && now >= start_time) {\n            started = true;\n        }\n        if (started && now >= end) {\n            tick(1, 0);\n            stop();\n        }\n        if (!running) {\n            return false;\n        }\n        if (started) {\n            const p = now - start_time;\n            const t = 0 + 1 * easing(p / duration);\n            tick(t, 1 - t);\n        }\n        return true;\n    });\n    start();\n    tick(0, 1);\n    return stop;\n}\nfunction fix_position(node) {\n    const style = getComputedStyle(node);\n    if (style.position !== 'absolute' && style.position !== 'fixed') {\n        const { width, height } = style;\n        const a = node.getBoundingClientRect();\n        node.style.position = 'absolute';\n        node.style.width = width;\n        node.style.height = height;\n        add_transform(node, a);\n    }\n}\nfunction add_transform(node, a) {\n    const b = node.getBoundingClientRect();\n    if (a.left !== b.left || a.top !== b.top) {\n        const style = getComputedStyle(node);\n        const transform = style.transform === 'none' ? '' : style.transform;\n        node.style.transform = `${transform} translate(${a.left - b.left}px, ${a.top - b.top}px)`;\n    }\n}\n\nlet current_component;\nfunction set_current_component(component) {\n    current_component = component;\n}\nfunction get_current_component() {\n    if (!current_component)\n        throw new Error('Function called outside component initialization');\n    return current_component;\n}\nfunction beforeUpdate(fn) {\n    get_current_component().$$.before_update.push(fn);\n}\nfunction onMount(fn) {\n    get_current_component().$$.on_mount.push(fn);\n}\nfunction afterUpdate(fn) {\n    get_current_component().$$.after_update.push(fn);\n}\nfunction onDestroy(fn) {\n    get_current_component().$$.on_destroy.push(fn);\n}\nfunction createEventDispatcher() {\n    const component = get_current_component();\n    return (type, detail) => {\n        const callbacks = component.$$.callbacks[type];\n        if (callbacks) {\n            // TODO are there situations where events could be dispatched\n            // in a server (non-DOM) environment?\n            const event = custom_event(type, detail);\n            callbacks.slice().forEach(fn => {\n                fn.call(component, event);\n            });\n        }\n    };\n}\nfunction setContext(key, context) {\n    get_current_component().$$.context.set(key, context);\n}\nfunction getContext(key) {\n    return get_current_component().$$.context.get(key);\n}\nfunction getAllContexts() {\n    return get_current_component().$$.context;\n}\nfunction hasContext(key) {\n    return get_current_component().$$.context.has(key);\n}\n// TODO figure out if we still want to support\n// shorthand events, or if we want to implement\n// a real bubbling mechanism\nfunction bubble(component, event) {\n    const callbacks = component.$$.callbacks[event.type];\n    if (callbacks) {\n        // @ts-ignore\n        callbacks.slice().forEach(fn => fn.call(this, event));\n    }\n}\n\nconst dirty_components = [];\nconst intros = { enabled: false };\nconst binding_callbacks = [];\nconst render_callbacks = [];\nconst flush_callbacks = [];\nconst resolved_promise = Promise.resolve();\nlet update_scheduled = false;\nfunction schedule_update() {\n    if (!update_scheduled) {\n        update_scheduled = true;\n        resolved_promise.then(flush);\n    }\n}\nfunction tick() {\n    schedule_update();\n    return resolved_promise;\n}\nfunction add_render_callback(fn) {\n    render_callbacks.push(fn);\n}\nfunction add_flush_callback(fn) {\n    flush_callbacks.push(fn);\n}\n// flush() calls callbacks in this order:\n// 1. All beforeUpdate callbacks, in order: parents before children\n// 2. All bind:this callbacks, in reverse order: children before parents.\n// 3. All afterUpdate callbacks, in order: parents before children. EXCEPT\n//    for afterUpdates called during the initial onMount, which are called in\n//    reverse order: children before parents.\n// Since callbacks might update component values, which could trigger another\n// call to flush(), the following steps guard against this:\n// 1. During beforeUpdate, any updated components will be added to the\n//    dirty_components array and will cause a reentrant call to flush(). Because\n//    the flush index is kept outside the function, the reentrant call will pick\n//    up where the earlier call left off and go through all dirty components. The\n//    current_component value is saved and restored so that the reentrant call will\n//    not interfere with the \"parent\" flush() call.\n// 2. bind:this callbacks cannot trigger new flush() calls.\n// 3. During afterUpdate, any updated components will NOT have their afterUpdate\n//    callback called a second time; the seen_callbacks set, outside the flush()\n//    function, guarantees this behavior.\nconst seen_callbacks = new Set();\nlet flushidx = 0; // Do *not* move this inside the flush() function\nfunction flush() {\n    const saved_component = current_component;\n    do {\n        // first, call beforeUpdate functions\n        // and update components\n        while (flushidx < dirty_components.length) {\n            const component = dirty_components[flushidx];\n            flushidx++;\n            set_current_component(component);\n            update(component.$$);\n        }\n        set_current_component(null);\n        dirty_components.length = 0;\n        flushidx = 0;\n        while (binding_callbacks.length)\n            binding_callbacks.pop()();\n        // then, once components are updated, call\n        // afterUpdate functions. This may cause\n        // subsequent updates...\n        for (let i = 0; i < render_callbacks.length; i += 1) {\n            const callback = render_callbacks[i];\n            if (!seen_callbacks.has(callback)) {\n                // ...so guard against infinite loops\n                seen_callbacks.add(callback);\n                callback();\n            }\n        }\n        render_callbacks.length = 0;\n    } while (dirty_components.length);\n    while (flush_callbacks.length) {\n        flush_callbacks.pop()();\n    }\n    update_scheduled = false;\n    seen_callbacks.clear();\n    set_current_component(saved_component);\n}\nfunction update($$) {\n    if ($$.fragment !== null) {\n        $$.update();\n        run_all($$.before_update);\n        const dirty = $$.dirty;\n        $$.dirty = [-1];\n        $$.fragment && $$.fragment.p($$.ctx, dirty);\n        $$.after_update.forEach(add_render_callback);\n    }\n}\n\nlet promise;\nfunction wait() {\n    if (!promise) {\n        promise = Promise.resolve();\n        promise.then(() => {\n            promise = null;\n        });\n    }\n    return promise;\n}\nfunction dispatch(node, direction, kind) {\n    node.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));\n}\nconst outroing = new Set();\nlet outros;\nfunction group_outros() {\n    outros = {\n        r: 0,\n        c: [],\n        p: outros // parent group\n    };\n}\nfunction check_outros() {\n    if (!outros.r) {\n        run_all(outros.c);\n    }\n    outros = outros.p;\n}\nfunction transition_in(block, local) {\n    if (block && block.i) {\n        outroing.delete(block);\n        block.i(local);\n    }\n}\nfunction transition_out(block, local, detach, callback) {\n    if (block && block.o) {\n        if (outroing.has(block))\n            return;\n        outroing.add(block);\n        outros.c.push(() => {\n            outroing.delete(block);\n            if (callback) {\n                if (detach)\n                    block.d(1);\n                callback();\n            }\n        });\n        block.o(local);\n    }\n}\nconst null_transition = { duration: 0 };\nfunction create_in_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = false;\n    let animation_name;\n    let task;\n    let uid = 0;\n    function cleanup() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 0, 1, duration, delay, easing, css, uid++);\n        tick(0, 1);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        if (task)\n            task.abort();\n        running = true;\n        add_render_callback(() => dispatch(node, true, 'start'));\n        task = loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(1, 0);\n                    dispatch(node, true, 'end');\n                    cleanup();\n                    return running = false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(t, 1 - t);\n                }\n            }\n            return running;\n        });\n    }\n    let started = false;\n    return {\n        start() {\n            if (started)\n                return;\n            started = true;\n            delete_rule(node);\n            if (is_function(config)) {\n                config = config();\n                wait().then(go);\n            }\n            else {\n                go();\n            }\n        },\n        invalidate() {\n            started = false;\n        },\n        end() {\n            if (running) {\n                cleanup();\n                running = false;\n            }\n        }\n    };\n}\nfunction create_out_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = true;\n    let animation_name;\n    const group = outros;\n    group.r += 1;\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 1, 0, duration, delay, easing, css);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        add_render_callback(() => dispatch(node, false, 'start'));\n        loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(0, 1);\n                    dispatch(node, false, 'end');\n                    if (!--group.r) {\n                        // this will result in `end()` being called,\n                        // so we don't need to clean up here\n                        run_all(group.c);\n                    }\n                    return false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(1 - t, t);\n                }\n            }\n            return running;\n        });\n    }\n    if (is_function(config)) {\n        wait().then(() => {\n            // @ts-ignore\n            config = config();\n            go();\n        });\n    }\n    else {\n        go();\n    }\n    return {\n        end(reset) {\n            if (reset && config.tick) {\n                config.tick(1, 0);\n            }\n            if (running) {\n                if (animation_name)\n                    delete_rule(node, animation_name);\n                running = false;\n            }\n        }\n    };\n}\nfunction create_bidirectional_transition(node, fn, params, intro) {\n    let config = fn(node, params);\n    let t = intro ? 0 : 1;\n    let running_program = null;\n    let pending_program = null;\n    let animation_name = null;\n    function clear_animation() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function init(program, duration) {\n        const d = (program.b - t);\n        duration *= Math.abs(d);\n        return {\n            a: t,\n            b: program.b,\n            d,\n            duration,\n            start: program.start,\n            end: program.start + duration,\n            group: program.group\n        };\n    }\n    function go(b) {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        const program = {\n            start: now() + delay,\n            b\n        };\n        if (!b) {\n            // @ts-ignore todo: improve typings\n            program.group = outros;\n            outros.r += 1;\n        }\n        if (running_program || pending_program) {\n            pending_program = program;\n        }\n        else {\n            // if this is an intro, and there's a delay, we need to do\n            // an initial tick and/or apply CSS animation immediately\n            if (css) {\n                clear_animation();\n                animation_name = create_rule(node, t, b, duration, delay, easing, css);\n            }\n            if (b)\n                tick(0, 1);\n            running_program = init(program, duration);\n            add_render_callback(() => dispatch(node, b, 'start'));\n            loop(now => {\n                if (pending_program && now > pending_program.start) {\n                    running_program = init(pending_program, duration);\n                    pending_program = null;\n                    dispatch(node, running_program.b, 'start');\n                    if (css) {\n                        clear_animation();\n                        animation_name = create_rule(node, t, running_program.b, running_program.duration, 0, easing, config.css);\n                    }\n                }\n                if (running_program) {\n                    if (now >= running_program.end) {\n                        tick(t = running_program.b, 1 - t);\n                        dispatch(node, running_program.b, 'end');\n                        if (!pending_program) {\n                            // we're done\n                            if (running_program.b) {\n                                // intro — we can tidy up immediately\n                                clear_animation();\n                            }\n                            else {\n                                // outro — needs to be coordinated\n                                if (!--running_program.group.r)\n                                    run_all(running_program.group.c);\n                            }\n                        }\n                        running_program = null;\n                    }\n                    else if (now >= running_program.start) {\n                        const p = now - running_program.start;\n                        t = running_program.a + running_program.d * easing(p / running_program.duration);\n                        tick(t, 1 - t);\n                    }\n                }\n                return !!(running_program || pending_program);\n            });\n        }\n    }\n    return {\n        run(b) {\n            if (is_function(config)) {\n                wait().then(() => {\n                    // @ts-ignore\n                    config = config();\n                    go(b);\n                });\n            }\n            else {\n                go(b);\n            }\n        },\n        end() {\n            clear_animation();\n            running_program = pending_program = null;\n        }\n    };\n}\n\nfunction handle_promise(promise, info) {\n    const token = info.token = {};\n    function update(type, index, key, value) {\n        if (info.token !== token)\n            return;\n        info.resolved = value;\n        let child_ctx = info.ctx;\n        if (key !== undefined) {\n            child_ctx = child_ctx.slice();\n            child_ctx[key] = value;\n        }\n        const block = type && (info.current = type)(child_ctx);\n        let needs_flush = false;\n        if (info.block) {\n            if (info.blocks) {\n                info.blocks.forEach((block, i) => {\n                    if (i !== index && block) {\n                        group_outros();\n                        transition_out(block, 1, 1, () => {\n                            if (info.blocks[i] === block) {\n                                info.blocks[i] = null;\n                            }\n                        });\n                        check_outros();\n                    }\n                });\n            }\n            else {\n                info.block.d(1);\n            }\n            block.c();\n            transition_in(block, 1);\n            block.m(info.mount(), info.anchor);\n            needs_flush = true;\n        }\n        info.block = block;\n        if (info.blocks)\n            info.blocks[index] = block;\n        if (needs_flush) {\n            flush();\n        }\n    }\n    if (is_promise(promise)) {\n        const current_component = get_current_component();\n        promise.then(value => {\n            set_current_component(current_component);\n            update(info.then, 1, info.value, value);\n            set_current_component(null);\n        }, error => {\n            set_current_component(current_component);\n            update(info.catch, 2, info.error, error);\n            set_current_component(null);\n            if (!info.hasCatch) {\n                throw error;\n            }\n        });\n        // if we previously had a then/catch block, destroy it\n        if (info.current !== info.pending) {\n            update(info.pending, 0);\n            return true;\n        }\n    }\n    else {\n        if (info.current !== info.then) {\n            update(info.then, 1, info.value, promise);\n            return true;\n        }\n        info.resolved = promise;\n    }\n}\nfunction update_await_block_branch(info, ctx, dirty) {\n    const child_ctx = ctx.slice();\n    const { resolved } = info;\n    if (info.current === info.then) {\n        child_ctx[info.value] = resolved;\n    }\n    if (info.current === info.catch) {\n        child_ctx[info.error] = resolved;\n    }\n    info.block.p(child_ctx, dirty);\n}\n\nconst globals = (typeof window !== 'undefined'\n    ? window\n    : typeof globalThis !== 'undefined'\n        ? globalThis\n        : global);\n\nfunction destroy_block(block, lookup) {\n    block.d(1);\n    lookup.delete(block.key);\n}\nfunction outro_and_destroy_block(block, lookup) {\n    transition_out(block, 1, 1, () => {\n        lookup.delete(block.key);\n    });\n}\nfunction fix_and_destroy_block(block, lookup) {\n    block.f();\n    destroy_block(block, lookup);\n}\nfunction fix_and_outro_and_destroy_block(block, lookup) {\n    block.f();\n    outro_and_destroy_block(block, lookup);\n}\nfunction update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block, next, get_context) {\n    let o = old_blocks.length;\n    let n = list.length;\n    let i = o;\n    const old_indexes = {};\n    while (i--)\n        old_indexes[old_blocks[i].key] = i;\n    const new_blocks = [];\n    const new_lookup = new Map();\n    const deltas = new Map();\n    i = n;\n    while (i--) {\n        const child_ctx = get_context(ctx, list, i);\n        const key = get_key(child_ctx);\n        let block = lookup.get(key);\n        if (!block) {\n            block = create_each_block(key, child_ctx);\n            block.c();\n        }\n        else if (dynamic) {\n            block.p(child_ctx, dirty);\n        }\n        new_lookup.set(key, new_blocks[i] = block);\n        if (key in old_indexes)\n            deltas.set(key, Math.abs(i - old_indexes[key]));\n    }\n    const will_move = new Set();\n    const did_move = new Set();\n    function insert(block) {\n        transition_in(block, 1);\n        block.m(node, next);\n        lookup.set(block.key, block);\n        next = block.first;\n        n--;\n    }\n    while (o && n) {\n        const new_block = new_blocks[n - 1];\n        const old_block = old_blocks[o - 1];\n        const new_key = new_block.key;\n        const old_key = old_block.key;\n        if (new_block === old_block) {\n            // do nothing\n            next = new_block.first;\n            o--;\n            n--;\n        }\n        else if (!new_lookup.has(old_key)) {\n            // remove old block\n            destroy(old_block, lookup);\n            o--;\n        }\n        else if (!lookup.has(new_key) || will_move.has(new_key)) {\n            insert(new_block);\n        }\n        else if (did_move.has(old_key)) {\n            o--;\n        }\n        else if (deltas.get(new_key) > deltas.get(old_key)) {\n            did_move.add(new_key);\n            insert(new_block);\n        }\n        else {\n            will_move.add(old_key);\n            o--;\n        }\n    }\n    while (o--) {\n        const old_block = old_blocks[o];\n        if (!new_lookup.has(old_block.key))\n            destroy(old_block, lookup);\n    }\n    while (n)\n        insert(new_blocks[n - 1]);\n    return new_blocks;\n}\nfunction validate_each_keys(ctx, list, get_context, get_key) {\n    const keys = new Set();\n    for (let i = 0; i < list.length; i++) {\n        const key = get_key(get_context(ctx, list, i));\n        if (keys.has(key)) {\n            throw new Error('Cannot have duplicate keys in a keyed each');\n        }\n        keys.add(key);\n    }\n}\n\nfunction get_spread_update(levels, updates) {\n    const update = {};\n    const to_null_out = {};\n    const accounted_for = { $$scope: 1 };\n    let i = levels.length;\n    while (i--) {\n        const o = levels[i];\n        const n = updates[i];\n        if (n) {\n            for (const key in o) {\n                if (!(key in n))\n                    to_null_out[key] = 1;\n            }\n            for (const key in n) {\n                if (!accounted_for[key]) {\n                    update[key] = n[key];\n                    accounted_for[key] = 1;\n                }\n            }\n            levels[i] = n;\n        }\n        else {\n            for (const key in o) {\n                accounted_for[key] = 1;\n            }\n        }\n    }\n    for (const key in to_null_out) {\n        if (!(key in update))\n            update[key] = undefined;\n    }\n    return update;\n}\nfunction get_spread_object(spread_props) {\n    return typeof spread_props === 'object' && spread_props !== null ? spread_props : {};\n}\n\n// source: https://html.spec.whatwg.org/multipage/indices.html\nconst boolean_attributes = new Set([\n    'allowfullscreen',\n    'allowpaymentrequest',\n    'async',\n    'autofocus',\n    'autoplay',\n    'checked',\n    'controls',\n    'default',\n    'defer',\n    'disabled',\n    'formnovalidate',\n    'hidden',\n    'ismap',\n    'loop',\n    'multiple',\n    'muted',\n    'nomodule',\n    'novalidate',\n    'open',\n    'playsinline',\n    'readonly',\n    'required',\n    'reversed',\n    'selected'\n]);\n\nconst invalid_attribute_name_character = /[\\s'\">/=\\u{FDD0}-\\u{FDEF}\\u{FFFE}\\u{FFFF}\\u{1FFFE}\\u{1FFFF}\\u{2FFFE}\\u{2FFFF}\\u{3FFFE}\\u{3FFFF}\\u{4FFFE}\\u{4FFFF}\\u{5FFFE}\\u{5FFFF}\\u{6FFFE}\\u{6FFFF}\\u{7FFFE}\\u{7FFFF}\\u{8FFFE}\\u{8FFFF}\\u{9FFFE}\\u{9FFFF}\\u{AFFFE}\\u{AFFFF}\\u{BFFFE}\\u{BFFFF}\\u{CFFFE}\\u{CFFFF}\\u{DFFFE}\\u{DFFFF}\\u{EFFFE}\\u{EFFFF}\\u{FFFFE}\\u{FFFFF}\\u{10FFFE}\\u{10FFFF}]/u;\n// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n// https://infra.spec.whatwg.org/#noncharacter\nfunction spread(args, attrs_to_add) {\n    const attributes = Object.assign({}, ...args);\n    if (attrs_to_add) {\n        const classes_to_add = attrs_to_add.classes;\n        const styles_to_add = attrs_to_add.styles;\n        if (classes_to_add) {\n            if (attributes.class == null) {\n                attributes.class = classes_to_add;\n            }\n            else {\n                attributes.class += ' ' + classes_to_add;\n            }\n        }\n        if (styles_to_add) {\n            if (attributes.style == null) {\n                attributes.style = style_object_to_string(styles_to_add);\n            }\n            else {\n                attributes.style = style_object_to_string(merge_ssr_styles(attributes.style, styles_to_add));\n            }\n        }\n    }\n    let str = '';\n    Object.keys(attributes).forEach(name => {\n        if (invalid_attribute_name_character.test(name))\n            return;\n        const value = attributes[name];\n        if (value === true)\n            str += ' ' + name;\n        else if (boolean_attributes.has(name.toLowerCase())) {\n            if (value)\n                str += ' ' + name;\n        }\n        else if (value != null) {\n            str += ` ${name}=\"${value}\"`;\n        }\n    });\n    return str;\n}\nfunction merge_ssr_styles(style_attribute, style_directive) {\n    const style_object = {};\n    for (const individual_style of style_attribute.split(';')) {\n        const colon_index = individual_style.indexOf(':');\n        const name = individual_style.slice(0, colon_index).trim();\n        const value = individual_style.slice(colon_index + 1).trim();\n        if (!name)\n            continue;\n        style_object[name] = value;\n    }\n    for (const name in style_directive) {\n        const value = style_directive[name];\n        if (value) {\n            style_object[name] = value;\n        }\n        else {\n            delete style_object[name];\n        }\n    }\n    return style_object;\n}\nconst escaped = {\n    '\"': '&quot;',\n    \"'\": '&#39;',\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;'\n};\nfunction escape(html) {\n    return String(html).replace(/[\"'&<>]/g, match => escaped[match]);\n}\nfunction escape_attribute_value(value) {\n    return typeof value === 'string' ? escape(value) : value;\n}\nfunction escape_object(obj) {\n    const result = {};\n    for (const key in obj) {\n        result[key] = escape_attribute_value(obj[key]);\n    }\n    return result;\n}\nfunction each(items, fn) {\n    let str = '';\n    for (let i = 0; i < items.length; i += 1) {\n        str += fn(items[i], i);\n    }\n    return str;\n}\nconst missing_component = {\n    $$render: () => ''\n};\nfunction validate_component(component, name) {\n    if (!component || !component.$$render) {\n        if (name === 'svelte:component')\n            name += ' this={...}';\n        throw new Error(`<${name}> is not a valid SSR component. You may need to review your build config to ensure that dependencies are compiled, rather than imported as pre-compiled modules`);\n    }\n    return component;\n}\nfunction debug(file, line, column, values) {\n    console.log(`{@debug} ${file ? file + ' ' : ''}(${line}:${column})`); // eslint-disable-line no-console\n    console.log(values); // eslint-disable-line no-console\n    return '';\n}\nlet on_destroy;\nfunction create_ssr_component(fn) {\n    function $$render(result, props, bindings, slots, context) {\n        const parent_component = current_component;\n        const $$ = {\n            on_destroy,\n            context: new Map(context || (parent_component ? parent_component.$$.context : [])),\n            // these will be immediately discarded\n            on_mount: [],\n            before_update: [],\n            after_update: [],\n            callbacks: blank_object()\n        };\n        set_current_component({ $$ });\n        const html = fn(result, props, bindings, slots);\n        set_current_component(parent_component);\n        return html;\n    }\n    return {\n        render: (props = {}, { $$slots = {}, context = new Map() } = {}) => {\n            on_destroy = [];\n            const result = { title: '', head: '', css: new Set() };\n            const html = $$render(result, props, {}, $$slots, context);\n            run_all(on_destroy);\n            return {\n                html,\n                css: {\n                    code: Array.from(result.css).map(css => css.code).join('\\n'),\n                    map: null // TODO\n                },\n                head: result.title + result.head\n            };\n        },\n        $$render\n    };\n}\nfunction add_attribute(name, value, boolean) {\n    if (value == null || (boolean && !value))\n        return '';\n    return ` ${name}${value === true && boolean_attributes.has(name) ? '' : `=${typeof value === 'string' ? JSON.stringify(escape(value)) : `\"${value}\"`}`}`;\n}\nfunction add_classes(classes) {\n    return classes ? ` class=\"${classes}\"` : '';\n}\nfunction style_object_to_string(style_object) {\n    return Object.keys(style_object)\n        .filter(key => style_object[key])\n        .map(key => `${key}: ${style_object[key]};`)\n        .join(' ');\n}\nfunction add_styles(style_object) {\n    const styles = style_object_to_string(style_object);\n    return styles ? ` style=\"${styles}\"` : '';\n}\n\nfunction bind(component, name, callback) {\n    const index = component.$$.props[name];\n    if (index !== undefined) {\n        component.$$.bound[index] = callback;\n        callback(component.$$.ctx[index]);\n    }\n}\nfunction create_component(block) {\n    block && block.c();\n}\nfunction claim_component(block, parent_nodes) {\n    block && block.l(parent_nodes);\n}\nfunction mount_component(component, target, anchor, customElement) {\n    const { fragment, on_mount, on_destroy, after_update } = component.$$;\n    fragment && fragment.m(target, anchor);\n    if (!customElement) {\n        // onMount happens before the initial afterUpdate\n        add_render_callback(() => {\n            const new_on_destroy = on_mount.map(run).filter(is_function);\n            if (on_destroy) {\n                on_destroy.push(...new_on_destroy);\n            }\n            else {\n                // Edge case - component was destroyed immediately,\n                // most likely as a result of a binding initialising\n                run_all(new_on_destroy);\n            }\n            component.$$.on_mount = [];\n        });\n    }\n    after_update.forEach(add_render_callback);\n}\nfunction destroy_component(component, detaching) {\n    const $$ = component.$$;\n    if ($$.fragment !== null) {\n        run_all($$.on_destroy);\n        $$.fragment && $$.fragment.d(detaching);\n        // TODO null out other refs, including component.$$ (but need to\n        // preserve final state?)\n        $$.on_destroy = $$.fragment = null;\n        $$.ctx = [];\n    }\n}\nfunction make_dirty(component, i) {\n    if (component.$$.dirty[0] === -1) {\n        dirty_components.push(component);\n        schedule_update();\n        component.$$.dirty.fill(0);\n    }\n    component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));\n}\nfunction init(component, options, instance, create_fragment, not_equal, props, append_styles, dirty = [-1]) {\n    const parent_component = current_component;\n    set_current_component(component);\n    const $$ = component.$$ = {\n        fragment: null,\n        ctx: null,\n        // state\n        props,\n        update: noop,\n        not_equal,\n        bound: blank_object(),\n        // lifecycle\n        on_mount: [],\n        on_destroy: [],\n        on_disconnect: [],\n        before_update: [],\n        after_update: [],\n        context: new Map(options.context || (parent_component ? parent_component.$$.context : [])),\n        // everything else\n        callbacks: blank_object(),\n        dirty,\n        skip_bound: false,\n        root: options.target || parent_component.$$.root\n    };\n    append_styles && append_styles($$.root);\n    let ready = false;\n    $$.ctx = instance\n        ? instance(component, options.props || {}, (i, ret, ...rest) => {\n            const value = rest.length ? rest[0] : ret;\n            if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {\n                if (!$$.skip_bound && $$.bound[i])\n                    $$.bound[i](value);\n                if (ready)\n                    make_dirty(component, i);\n            }\n            return ret;\n        })\n        : [];\n    $$.update();\n    ready = true;\n    run_all($$.before_update);\n    // `false` as a special case of no DOM component\n    $$.fragment = create_fragment ? create_fragment($$.ctx) : false;\n    if (options.target) {\n        if (options.hydrate) {\n            start_hydrating();\n            const nodes = children(options.target);\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.l(nodes);\n            nodes.forEach(detach);\n        }\n        else {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.c();\n        }\n        if (options.intro)\n            transition_in(component.$$.fragment);\n        mount_component(component, options.target, options.anchor, options.customElement);\n        end_hydrating();\n        flush();\n    }\n    set_current_component(parent_component);\n}\nlet SvelteElement;\nif (typeof HTMLElement === 'function') {\n    SvelteElement = class extends HTMLElement {\n        constructor() {\n            super();\n            this.attachShadow({ mode: 'open' });\n        }\n        connectedCallback() {\n            const { on_mount } = this.$$;\n            this.$$.on_disconnect = on_mount.map(run).filter(is_function);\n            // @ts-ignore todo: improve typings\n            for (const key in this.$$.slotted) {\n                // @ts-ignore todo: improve typings\n                this.appendChild(this.$$.slotted[key]);\n            }\n        }\n        attributeChangedCallback(attr, _oldValue, newValue) {\n            this[attr] = newValue;\n        }\n        disconnectedCallback() {\n            run_all(this.$$.on_disconnect);\n        }\n        $destroy() {\n            destroy_component(this, 1);\n            this.$destroy = noop;\n        }\n        $on(type, callback) {\n            // TODO should this delegate to addEventListener?\n            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n            callbacks.push(callback);\n            return () => {\n                const index = callbacks.indexOf(callback);\n                if (index !== -1)\n                    callbacks.splice(index, 1);\n            };\n        }\n        $set($$props) {\n            if (this.$$set && !is_empty($$props)) {\n                this.$$.skip_bound = true;\n                this.$$set($$props);\n                this.$$.skip_bound = false;\n            }\n        }\n    };\n}\n/**\n * Base class for Svelte components. Used when dev=false.\n */\nclass SvelteComponent {\n    $destroy() {\n        destroy_component(this, 1);\n        this.$destroy = noop;\n    }\n    $on(type, callback) {\n        const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n        callbacks.push(callback);\n        return () => {\n            const index = callbacks.indexOf(callback);\n            if (index !== -1)\n                callbacks.splice(index, 1);\n        };\n    }\n    $set($$props) {\n        if (this.$$set && !is_empty($$props)) {\n            this.$$.skip_bound = true;\n            this.$$set($$props);\n            this.$$.skip_bound = false;\n        }\n    }\n}\n\nfunction dispatch_dev(type, detail) {\n    document.dispatchEvent(custom_event(type, Object.assign({ version: '3.46.2' }, detail), true));\n}\nfunction append_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append(target, node);\n}\nfunction append_hydration_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append_hydration(target, node);\n}\nfunction insert_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert(target, node, anchor);\n}\nfunction insert_hydration_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert_hydration(target, node, anchor);\n}\nfunction detach_dev(node) {\n    dispatch_dev('SvelteDOMRemove', { node });\n    detach(node);\n}\nfunction detach_between_dev(before, after) {\n    while (before.nextSibling && before.nextSibling !== after) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction detach_before_dev(after) {\n    while (after.previousSibling) {\n        detach_dev(after.previousSibling);\n    }\n}\nfunction detach_after_dev(before) {\n    while (before.nextSibling) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation) {\n    const modifiers = options === true ? ['capture'] : options ? Array.from(Object.keys(options)) : [];\n    if (has_prevent_default)\n        modifiers.push('preventDefault');\n    if (has_stop_propagation)\n        modifiers.push('stopPropagation');\n    dispatch_dev('SvelteDOMAddEventListener', { node, event, handler, modifiers });\n    const dispose = listen(node, event, handler, options);\n    return () => {\n        dispatch_dev('SvelteDOMRemoveEventListener', { node, event, handler, modifiers });\n        dispose();\n    };\n}\nfunction attr_dev(node, attribute, value) {\n    attr(node, attribute, value);\n    if (value == null)\n        dispatch_dev('SvelteDOMRemoveAttribute', { node, attribute });\n    else\n        dispatch_dev('SvelteDOMSetAttribute', { node, attribute, value });\n}\nfunction prop_dev(node, property, value) {\n    node[property] = value;\n    dispatch_dev('SvelteDOMSetProperty', { node, property, value });\n}\nfunction dataset_dev(node, property, value) {\n    node.dataset[property] = value;\n    dispatch_dev('SvelteDOMSetDataset', { node, property, value });\n}\nfunction set_data_dev(text, data) {\n    data = '' + data;\n    if (text.wholeText === data)\n        return;\n    dispatch_dev('SvelteDOMSetData', { node: text, data });\n    text.data = data;\n}\nfunction validate_each_argument(arg) {\n    if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {\n        let msg = '{#each} only iterates over array-like objects.';\n        if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {\n            msg += ' You can use a spread to convert this iterable into an array.';\n        }\n        throw new Error(msg);\n    }\n}\nfunction validate_slots(name, slot, keys) {\n    for (const slot_key of Object.keys(slot)) {\n        if (!~keys.indexOf(slot_key)) {\n            console.warn(`<${name}> received an unexpected slot \"${slot_key}\".`);\n        }\n    }\n}\n/**\n * Base class for Svelte components with some minor dev-enhancements. Used when dev=true.\n */\nclass SvelteComponentDev extends SvelteComponent {\n    constructor(options) {\n        if (!options || (!options.target && !options.$$inline)) {\n            throw new Error(\"'target' is a required option\");\n        }\n        super();\n    }\n    $destroy() {\n        super.$destroy();\n        this.$destroy = () => {\n            console.warn('Component was already destroyed'); // eslint-disable-line no-console\n        };\n    }\n    $capture_state() { }\n    $inject_state() { }\n}\n/**\n * Base class to create strongly typed Svelte components.\n * This only exists for typing purposes and should be used in `.d.ts` files.\n *\n * ### Example:\n *\n * You have component library on npm called `component-library`, from which\n * you export a component called `MyComponent`. For Svelte+TypeScript users,\n * you want to provide typings. Therefore you create a `index.d.ts`:\n * ```ts\n * import { SvelteComponentTyped } from \"svelte\";\n * export class MyComponent extends SvelteComponentTyped<{foo: string}> {}\n * ```\n * Typing this makes it possible for IDEs like VS Code with the Svelte extension\n * to provide intellisense and to use the component like this in a Svelte file\n * with TypeScript:\n * ```svelte\n * <script lang=\"ts\">\n * \timport { MyComponent } from \"component-library\";\n * </script>\n * <MyComponent foo={'bar'} />\n * ```\n *\n * #### Why not make this part of `SvelteComponent(Dev)`?\n * Because\n * ```ts\n * class ASubclassOfSvelteComponent extends SvelteComponent<{foo: string}> {}\n * const component: typeof SvelteComponent = ASubclassOfSvelteComponent;\n * ```\n * will throw a type error, so we need to separate the more strictly typed class.\n */\nclass SvelteComponentTyped extends SvelteComponentDev {\n    constructor(options) {\n        super(options);\n    }\n}\nfunction loop_guard(timeout) {\n    const start = Date.now();\n    return () => {\n        if (Date.now() - start > timeout) {\n            throw new Error('Infinite loop detected');\n        }\n    };\n}\n\nexport { HtmlTag, HtmlTagHydration, SvelteComponent, SvelteComponentDev, SvelteComponentTyped, SvelteElement, action_destroyer, add_attribute, add_classes, add_flush_callback, add_location, add_render_callback, add_resize_listener, add_styles, add_transform, afterUpdate, append, append_dev, append_empty_stylesheet, append_hydration, append_hydration_dev, append_styles, assign, attr, attr_dev, attribute_to_object, beforeUpdate, bind, binding_callbacks, blank_object, bubble, check_outros, children, claim_component, claim_element, claim_html_tag, claim_space, claim_svg_element, claim_text, clear_loops, component_subscribe, compute_rest_props, compute_slots, createEventDispatcher, create_animation, create_bidirectional_transition, create_component, create_in_transition, create_out_transition, create_slot, create_ssr_component, current_component, custom_event, dataset_dev, debug, destroy_block, destroy_component, destroy_each, detach, detach_after_dev, detach_before_dev, detach_between_dev, detach_dev, dirty_components, dispatch_dev, each, element, element_is, empty, end_hydrating, escape, escape_attribute_value, escape_object, escaped, exclude_internal_props, fix_and_destroy_block, fix_and_outro_and_destroy_block, fix_position, flush, getAllContexts, getContext, get_all_dirty_from_scope, get_binding_group_value, get_current_component, get_custom_elements_slots, get_root_for_style, get_slot_changes, get_spread_object, get_spread_update, get_store_value, globals, group_outros, handle_promise, hasContext, has_prop, identity, init, insert, insert_dev, insert_hydration, insert_hydration_dev, intros, invalid_attribute_name_character, is_client, is_crossorigin, is_empty, is_function, is_promise, listen, listen_dev, loop, loop_guard, merge_ssr_styles, missing_component, mount_component, noop, not_equal, now, null_to_empty, object_without_properties, onDestroy, onMount, once, outro_and_destroy_block, prevent_default, prop_dev, query_selector_all, raf, run, run_all, safe_not_equal, schedule_update, select_multiple_value, select_option, select_options, select_value, self, setContext, set_attributes, set_current_component, set_custom_element_data, set_data, set_data_dev, set_input_type, set_input_value, set_now, set_raf, set_store_value, set_style, set_svg_attributes, space, spread, src_url_equal, start_hydrating, stop_propagation, subscribe, svg_element, text, tick, time_ranges_to_array, to_number, toggle_class, transition_in, transition_out, trusted, update_await_block_branch, update_keyed_each, update_slot, update_slot_base, validate_component, validate_each_argument, validate_each_keys, validate_slots, validate_store, xlink_attr };\n","export const fields = {\n    // Header and CRE\n    signature: {id: 'signature', offset: 0x0000, size: 4, type: 'char', label: 'Signature'},\n    version: {id: 'version', offset: 0x0004, size: 4, type: 'char', label: 'Version'},\n    // Header\n    partyMembersStructOffset: {id: 'partyMembersStructOffset', offset: 0x0020, size: 4, type: 'uint4', label: 'Offset to NPC structs for party members'},\n    partyMembersStructCount: {id: 'partyMembersStructCount', offset: 0x0024, size: 4, type: 'uint4', label: 'Count of NPC structs for party members (including protagonist)'},\n    partyInventoryOffset: {id: 'partyInventoryOffset', offset: 0x0028, size: 4, type: 'uint4', label: 'Offset to party inventory'},\n    partyInventoryCount: {id: 'partyInventoryCount', offset: 0x002c, size: 4, type: 'uint4', label: 'Count of party inventory'},\n    nonPartyMembersStructOffset: {id: 'nonPartyMembersStructOffset', offset: 0x0030, size: 4, type: 'uint4', label: 'Offset to NPC structs for non-party members'},\n    nonPartyMembersStructCount: {id: 'nonPartyMembersStructCount', offset: 0x0034, size: 4, type: 'uint4', label: 'Count of NPC structs for non-party members'},\n    globalNamespaceVariablesOffset: {id: 'globalNamespaceVariablesOffset', offset: 0x0038, size: 4, type: 'uint4', label: 'Offset to Global namespace variables'},\n    globalNamespaceVariablesCount: {id: 'globalNamespaceVariablesCount', offset: 0x003c, size: 4, type: 'uint4', label: 'Count of Global namespace variables'},\n    gameTime: {id: 'gameTime', offset: 0x0008, size: 4, type: 'dword', label: 'Game time'},\n    partyGold: {id: 'partyGold', offset: 0x0018, size: 4, type: 'dword', label: 'Party gold'},\n    partyReputation: {id: 'partyReputation', offset: 0x0054, size: 4, type: 'dword', label: 'Party reputation'},\n    // NPC Struct\n    characterName: {id: 'characterName', offset: 0x000c, size: 8, type: 'char', label: 'Character Name'},\n    characterCurrentArea: {id: 'characterCurrentArea', offset: 0x0018, size: 8, type: 'char', label: 'Character current area'},\n    creOffset: {id: 'creOffset', offset: 0x0004, size: 4, type: 'uint4', label: 'Offset (from start of file) to CRE resource data for this character'},\n    creSize: {id: 'creSize', offset: 0x0008, size: 4, type: 'uint4', label: 'Size of CRE resource data for this character'},\n    name: {id: 'name', offset: 0x00c0, size: 32, type: 'char', label: 'Name'},\n    // Character Stats\n    strongestKillName: {id: 'strongestKillName', offset: 0x0000, size: 4, label: 'Most powerful vanquished - Name'},\n    strongestKillXP: {id: 'strongestKillXP', offset: 0x0004, size: 4, label: 'Most powerful vanquished - XP Reward'},\n    timeInParty: {id: 'timeInParty', offset: 0x0008, size: 4, label: 'Time in party (1/15 seconds)'},\n    timeJoined: {id: 'timeJoined', offset: 0x000c, size: 4, label: 'Time Joined (1/15 seconds)'},\n    isPartyMember: {id: 'isPartyMember', offset: 0x0010, size: 1, label: 'Party member (0 = Not in party, 1 = In party)'},\n    firstLetterOfCre: {id: 'firstLetterOfCre', offset: 0x0013, size: 1, label: 'First letter of CRE resref (changed to *)'},\n    chapterKillsXP: {id: 'chapterKillsXP', offset: 0x0014, size: 4, label: 'Kills - XP Gained (chapter)'},\n    chapterKillsCount: {id: 'chapterKillsCount', offset: 0x0018, size: 4, label: 'Kills - Number (chapter)'},\n    gameKillsXP: {id: 'gameKillsXP', offset: 0x001c, size: 4, label: 'Kills - XP (game)'},\n    gameKillsCount: {id: 'gameKillsCount', offset: 0x0020, size: 4, label: 'Kills - number (game)'},\n    favouriteSpells: {id: 'favouriteSpells', offset: 0x0024, size: 4 * 8, label: 'Favourite spells'},\n    favouriteSpellCount: {id: 'favouriteSpellCount', offset: 0x0044, size: 4 * 2, label: 'Favourite spell count'},\n    favouriteWeapons: {id: 'favouriteWeapons', offset: 0x004c, size: 4 * 8, label: 'Favourite weapons'},\n    favouriteWeaponTime: {id: 'favouriteWeaponTime', offset: 0x006c, size: 4 * 2, label: 'Favourite weapon time (time equipped in combat - 1/15 seconds)'},\n    // CRE\n    creatureFlags: {id: 'creatureFlags', offset: 0x0010, size: 4, type: 'bin', label: 'Creature flags'},\n    experienceForKill: {id: 'experienceForKill', offset: 0x0014, size: 4, type: 'dword', label: 'XP (gained for killing this creature)'},\n    experiencePoints: {id: 'experiencePoints', offset: 0x0018, size: 4, type: 'uint4', label: 'Experience points'},\n    goldCarried: {id: 'goldCarried', offset: 0x001c, size: 4, type: 'uint4', label: 'Gold carried'},\n    permanentStatusFlags: {id: 'permanentStatusFlags', offset: 0x0020, size: 4, type: 'uint4', label: 'Permanent Status Flags'},\n    currentHitPoints: {id: 'currentHitPoints', offset: 0x0024, size: 2, type: 'uint4', label: 'Current hit points'},\n    maxHitPoints: {id: 'maxHitPoints', offset: 0x0026, size: 2, type: 'uint2', label: 'Max hit points'},\n    animation: {id: 'animation', offset: 0x0028, size: 4, type: 'uint4', label: 'Animation ID'},\n    metalColour: {id: 'metalColour', offset: 0x002c, size: 1, type: 'uint1', label: 'Metal Colour Index'},\n    minorColour: {id: 'minorColour', offset: 0x002d, size: 1, type: 'uint1', label: 'Minor Colour Index'},\n    majorColour: {id: 'majorColour', offset: 0x002e, size: 1, type: 'uint1', label: 'Major Colour Index'},\n    skinColour: {id: 'skinColour', offset: 0x002f, size: 1, type: 'uint1', label: 'Skin Colour Index'},\n    leatherColour: {id: 'leatherColour', offset: 0x0030, size: 1, type: 'uint1', label: 'Leather Colour Index'},\n    armorColour: {id: 'armorColour', offset: 0x0031, size: 1, type: 'uint1', label: 'Armor Colour Index'},\n    hairColour: {id: 'hairColour', offset: 0x0032, size: 1, type: 'uint1', label: 'Hair Colour Index'},\n    mediumPortrait: {id: 'mediumPortrait', offset: 0x0034, size: 8, type: 'char', label: 'Medium portrait'},\n    largePortrait: {id: 'largePortrait', offset: 0x003c, size: 8, type: 'char', label: 'Large portrait'},\n    reputation: {id: 'reputation', offset: 0x0044, size: 1, type: 'uint1', label: 'Reputation'},\n    acNatural: {id: 'acNatural', offset: 0x0046, size: 2, type: 'int2', label: 'AC (Natural)'},\n    acEffective: {id: 'acEffective', offset: 0x0048, size: 2, type: 'int2', label: 'AC (Effective)'},\n    acCrushing: {id: 'acCrushing', offset: 0x004a, size: 2, type: 'int2', label: 'AC (Crushing Attacks Modifier)'},\n    acMissile: {id: 'acMissile', offset: 0x004c, size: 2, type: 'int2', label: 'AC (Missile Attacks Modifier)'},\n    acPiercing: {id: 'acPiercing', offset: 0x004e, size: 2, type: 'int2', label: 'AC (Piercing Attacks Modifier)'},\n    acSlashing: {id: 'acSlashing', offset: 0x0050, size: 2, type: 'int2', label: 'AC (Slashing Attacks Modifier)'},\n    thac0: {id: 'thac0', offset: 0x0052, size: 1, type: 'int1', label: 'THAC0 (1-25)'},\n    attacksPerRound: {id: 'attacksPerRound', offset: 0x0053, size: 1, type: 'int1', label: 'Number of attacks (1-5)'},\n    saveVsDeath: {id: 'saveVsDeath', offset: 0x0054, size: 1, type: 'int1', label: 'Save versus death (0-20)'},\n    saveVsWands: {id: 'saveVsWands', offset: 0x0055, size: 1, type: 'int1', label: 'Save versus wands (0-20)'},\n    saveVsPolymorph: {id: 'saveVsPolymorph', offset: 0x0056, size: 1, type: 'int1', label: 'Save versus polymorph (0-20)'},\n    saveVsBreath: {id: 'saveVsBreath', offset: 0x0057, size: 1, type: 'int1', label: 'Save versus breath attacks (0-20)'},\n    saveVsSpells: {id: 'saveVsSpells', offset: 0x0058, size: 1, type: 'int1', label: 'Save versus spells (0-20)'},\n    resistFire: {id: 'resistFire', offset: 0x0059, size: 1, type: 'uint1', label: 'Resist Fire (0-100)'},\n    resistCold: {id: 'resistCold', offset: 0x005a, size: 1, type: 'uint1', label: 'Resist Cold (0-100)'},\n    resistElectricity: {id: 'resistElectricity', offset: 0x005b, size: 1, type: 'uint1', label: 'Resist Electricity (0-100)'},\n    resistAcid: {id: 'resistAcid', offset: 0x005c, size: 1, type: 'uint1', label: 'Resist Acid (0-100)'},\n    resistMagic: {id: 'resistMagic', offset: 0x005d, size: 1, type: 'uint1', label: 'Resist Magic (0-100)'},\n    resistMagicFire: {id: 'resistMagicFire', offset: 0x005e, size: 1, type: 'uint1', label: 'Resist Magic Fire (0-100)'},\n    resistMagicCold: {id: 'resistMagicCold', offset: 0x005f, size: 1, type: 'uint1', label: 'Resist Magic Cold (0-100)'},\n    resistSlashing: {id: 'resistSlashing', offset: 0x0060, size: 1, type: 'uint1', label: 'Resist Slashing (%) (0-100)'},\n    resistCrushing: {id: 'resistCrushing', offset: 0x0061, size: 1, type: 'uint1', label: 'Resist Crushing (%) (0-100)'},\n    resistPiercing: {id: 'resistPiercing', offset: 0x0062, size: 1, type: 'uint1', label: 'Resist Piercing (%) (0-100)'},\n    resistMissile: {id: 'resistMissile', offset: 0x0063, size: 1, type: 'uint1', label: 'Resist Missile (%) (0-100)'},\n    hideInShadows: {id: 'hideInShadows', offset: 0x0045, size: 1, type: 'uint1', label: 'Hide in Shadows (base)'},\n    detectIllusion: {id: 'detectIllusion', offset: 0x0064, size: 1, type: 'uint1', label: 'Detect illusion (min 0)'},\n    setTraps: {id: 'setTraps', offset: 0x0065, size: 1, type: 'uint1', label: 'Set traps (min 0)'},\n    lockpicking: {id: 'lockpicking', offset: 0x0067, size: 1, type: 'uint1', label: 'Lockpicking (min 0)'},\n    moveSilently: {id: 'moveSilently', offset: 0x0068, size: 1, type: 'uint1', label: 'Move silently (min 0)'},\n    findDisarmTraps: {id: 'findDisarmTraps', offset: 0x0069, size: 1, type: 'uint1', label: 'Find/disarm traps (min 0)'},\n    pickPockets: {id: 'pickPockets', offset: 0x006a, size: 1, type: 'uint1', label: 'Pick pockets (min 0)'},\n    loreLevel: {id: 'loreLevel', offset: 0x0066, size: 1, type: 'uint1', label: 'Lore level (0-100)'},\n    fatigue: {id: 'fatigue', offset: 0x006b, size: 1, type: 'uint1', label: 'Fatigue (0-100)'},\n    intoxication: {id: 'intoxication', offset: 0x006c, size: 1, type: 'uint1', label: 'Intoxication (0-100)'},\n    luck: {id: 'luck', offset: 0x006d, size: 1, type: 'uint1', label: 'Luck'},\n    turnUndead: {id: 'turnUndead', offset: 0x0082, size: 1, type: 'uint1', label: 'Turn undead level'},\n    trackingSkill: {id: 'trackingSkill', offset: 0x0083, size: 1, type: 'uint1', label: 'Tracking skill (0-100)'},\n    level1: {id: 'level1', offset: 0x0234, size: 1, type: 'uint1', label: 'Level first class (0-100)'},\n    level2: {id: 'level2', offset: 0x0235, size: 1, type: 'uint1', label: 'Level second class (0-100)'},\n    level3: {id: 'level3', offset: 0x0236, size: 1, type: 'uint1', label: 'Level third class (0-100)'},\n    strength: {id: 'strength', offset: 0x0238, size: 1, type: 'uint1', label: 'Strength (1-25)'},\n    strengthBonus: {id: 'strengthBonus', offset: 0x0239, size: 1, type: 'uint1', label: 'Strength % bonus (0-100)'},\n    intelligence: {id: 'intelligence', offset: 0x023a, size: 1, type: 'uint1', label: 'Intelligence (1-25)'},\n    wisdom: {id: 'wisdom', offset: 0x023b, size: 1, type: 'uint1', label: 'Wisdom (1-25)'},\n    dexterity: {id: 'dexterity', offset: 0x023c, size: 1, type: 'uint1', label: 'Dexterity (1-25)'},\n    constitution: {id: 'constitution', offset: 0x023d, size: 1, type: 'uint1', label: 'Constitution (1-25)'},\n    charisma: {id: 'charisma', offset: 0x023e, size: 1, type: 'uint1', label: 'Charisma (1-25)'},\n    morale: {id: 'morale', offset: 0x023f, size: 1, type: 'uint1', label: 'Morale (0-20)'},\n    moraleBreak: {id: 'moraleBreak', offset: 0x0240, size: 1, type: 'uint1', label: 'Morale break (0-20)'},\n    moraleRecoveryTime: {id: 'moraleRecoveryTime', offset: 0x0242, size: 2, type: 'uint2', label: 'Morale recovery time'},\n    racialEnemy: {id: 'racialEnemy', offset: 0x0241, size: 1, type: 'uint1', label: 'Racial enemy'},\n    kit: {id: 'kit', offset: 0x0244, size: 4, type: 'uint4', label: 'Kit'},\n    enemyAlly: {id: 'enemyAlly', offset: 0x0270, size: 1, type: 'uint1', label: 'Enemy-Ally'},\n    general: {id: 'general', offset: 0x0271, size: 1, type: 'uint1', label: 'General'},\n    race: {id: 'race', offset: 0x0272, size: 1, type: 'uint1', label: 'Race'},\n    class: {id: 'class', offset: 0x0273, size: 1, type: 'uint1', label: 'Class'},\n    gender: {id: 'gender', offset: 0x0275, size: 1, type: 'uint1', label: 'Gender'},\n    alignment: {id: 'alignment', offset: 0x027b, size: 1, type: 'uint1', label: 'Alignment'},\n    nonPcCharsName: {id: 'nonPcCharsName', offset: 0x0280, size: 32, type: 'char', label: 'NPC Characters Name'},\n    // specific: {id: 'specific', offset: 0x0274, size: 1, type: 'uint1', label: 'Specific'},\n}\n/*\n * Lore is calculated as ((level * rate) + int_bonus + wis_bonus).\n * Intelligence and wisdom bonuses are from LOREBON.2DA and the rate is the lookup value in LORE.2DA, based on class.\n * For multiclass characters, (level * rate) is calculated for both classes separately and the higher of the\n * two values is used - they are not cumulative.\n */\n/*\n * Highest attained level in class (0-100).\n * For dual/multi class characters, the levels for each class are split between 0x0234, 0x0235 and 0x0236\n * according to the internal class name, i.e. for a FIGHTER_THIEF 0x0234 will hold the fighter level,\n * 0x0235 will hold the thief level and 0x0236 will be 0.\n */\n/*\n * Morale default value is 10 (capped 0 — 20)\n * It is unclear what increases/decreases Morale or by how much.\n * A party member dying, and taking damage while already low on health are the obvious ways to lose Morale.\n */\n/*\n * Morale break is the lower bound for avoiding a morale failure.\n * If Morale is lower than this value, morale failure occurs, if Morale is higher, any morale failure is removed.\n * A value of 0 is effectively immune to morale failure though.\n * No creature has a Morale break value higher than 10 as they would always be in morale failure.\n * Morale also fails if Morale break = current Morale value, so 20 Morale will fail if Morale break is also 20.\n * Except if Morale break is 0, which cannot fail.\n */\n/*\n * Morale recovery time is the period of time (should be seconds) it takes to recover some amount of Morale naturally\n * (towards a value of 10, from a higher or lower value).\n * It's unknown what's going on internally though, as it's not consistent, and even the details given by CTRL+M\n * don't update Morale in real-time.\n */\n","/**\n * @param {Number} seconds\n * @returns {String}\n */\nexport const secondsToDhms = (seconds) => {\n    seconds = Number(seconds);\n    const d = Math.floor(seconds / (3600 * 24));\n    const h = Math.floor(seconds % (3600 * 24) / 3600);\n    const dDisplay = d > 0 ? d + (d === 1 ? \" day, \" : \" days, \") : \"\";\n    const hDisplay = h > 0 ? h + (h === 1 ? \" hour\" : \" hours\") : \"\";\n    return dDisplay + hDisplay;\n}\n","import {fields} from \"../data/fields\";\nimport {secondsToDhms} from \"../utils/time\";\n\nexport class GamV20HexEditor {\n    /*\n     * Names                        Bytes   Bits    Value range                         # Values            Comment\n     * -------------------------------------------------------------------------------------------------------------------------------\n     * char, byte                   1       8       -128 to +127                        256                 Signed Byte or character\n     * uchar, ubyte                 1       8       0 to 255                            256                 Unsigned Byte or character\n     * short, int16                 2       16      −32,768 to +32,767                  65,536              Signed 16 bit integer\n     * ushort, uint16, word         2       16      0 to 65535                          65,536              Unsigned 16 bit integer\n     * int, int32, long             4       32      −2,147,483,648 to +2,147,483,647    4,294,967,295       Signed 32 bit integer\n     * uint, uint32, ulong, dword   4       32      0 to 4,294,967,295                  4,294,967,295       Unsigned 32 bit integer\n     */\n\n    _hexArray\n    _headerOffset\n    _partyMembersStructsOffsets = []\n    _partyMembersCreOffsets = []\n    _partyMembersStatsOffsets = []\n    _nonPartyMembersStructsOffsets = []\n    _nonPartyMembersCreOffsets = []\n    _nonPartyMembersStatsOffsets = []\n    _partyMembersProficienciesOffsets = []\n    _nonPartyMembersProficienciesOffsets = []\n    _isValidGamFile = false\n\n    /**\n     * @param {Array.<Number>} uint8array\n     * @returns {Array.<String>}\n     */\n    constructor(uint8array) {\n        let hexArray = [];\n        for (let i in uint8array) {\n            hexArray.push((0 + uint8array[i].toString(16)).slice(-2));\n        }\n        this._hexArray = hexArray\n        this._headerOffset = 0x0000\n        this._isValidGamFile = this._validateGamFile()\n        if (this._isValidGamFile) {\n            this._locateCharactersOffsets()\n        }\n    }\n\n    /**\n     * @returns {Boolean}\n     */\n    get isValidGamFile() {\n        return this._isValidGamFile\n    }\n\n    readHeaderField(fieldId) {\n        const field = fields[fieldId];\n        if (!field) {\n            throw `Invalid field ${fieldId}`\n        }\n        return this._readOffsetValue(field);\n    }\n\n    readCreField(characterIdx, fieldId, inParty = true) {\n        const field = fields[fieldId];\n        if (!field) {\n            throw `Invalid field id ${fieldId}`\n        }\n        const offsetStart = inParty ? this._partyMembersCreOffsets[characterIdx] : this._nonPartyMembersCreOffsets[characterIdx]\n        if (!offsetStart) {\n            throw `Start offset not found for character idx ${characterIdx}`\n        }\n        return this._readOffsetValue({...field, offset: offsetStart + field.offset});\n    }\n\n    readNpcStructField(characterIdx, fieldId, inParty = true) {\n        const field = fields[fieldId];\n        if (!field) {\n            throw `Invalid field id ${fieldId}`\n        }\n        const offsetStart = inParty ? this._partyMembersStructsOffsets[characterIdx] : this._nonPartyMembersStructsOffsets[characterIdx]\n        if (!offsetStart) {\n            throw `Start offset not found for character idx ${characterIdx}`\n        }\n        return this._readOffsetValue({...field, offset: offsetStart + field.offset});\n    }\n\n    readCharacterStatField(characterIdx, fieldId, inParty = true) {\n        const field = fields[fieldId];\n        if (!field) {\n            throw `Invalid field id ${fieldId}`\n        }\n        const offsetStart = inParty ? this._partyMembersStatsOffsets[characterIdx] : this._nonPartyMembersStatsOffsets[characterIdx]\n        if (!offsetStart) {\n            throw `Start offset not found for character idx ${characterIdx}`\n        }\n        return this._readOffsetValue({...field, offset: offsetStart + field.offset});\n    }\n\n    readCharacterProficiencies(characterIdx, inParty = true) {\n        const offsets = inParty ? this._partyMembersProficienciesOffsets[characterIdx] : this._nonPartyMembersProficienciesOffsets[characterIdx]\n        if (!Array.isArray(offsets)) {\n            throw `Start offset not found for character idx ${characterIdx}`\n        }\n        const proficiencies = [];\n        for (let i = 0, iMax = offsets.length; i < iMax; i++) {\n            proficiencies.push({\n                weaponProficiency: this._readOffsetValue({id: 'weaponProficiency', offset: offsets[i] + 12, size: 1}),\n                proficiencyType: this._readOffsetValue({id: 'proficiencyType', offset: offsets[i] + 16, size: 1}),\n            })\n        }\n        return proficiencies;\n    }\n\n    writeHeaderField(fieldId, newValue) {\n        throw 'Method not supported'\n    }\n\n    writeCreField(characterIdx, fieldId, inParty, newValue) {\n        throw 'Method not supported'\n    }\n\n    writeNpcStructField(characterIdx, fieldId, inParty, newValue) {\n        throw 'Method not supported'\n    }\n\n    writeCharacterStatField(characterIdx, fieldId, inParty, newValue) {\n        throw 'Method not supported'\n    }\n\n    /**\n     * @returns {Boolean}\n     * @private\n     */\n    _validateGamFile() {\n        return this.readHeaderField('signature') === 'GAME'\n            && this.readHeaderField('version') === 'V2.0'\n    }\n\n    /**\n     * @returns {Array.<Number>}\n     * @private\n     */\n    _locateCharactersOffsets() {\n        const partyMembersStructOffset = this.readHeaderField('partyMembersStructOffset')\n        const partyMembersStructCount = this.readHeaderField('partyMembersStructCount')\n        const nonPartyMembersStructOffset = this.readHeaderField('nonPartyMembersStructOffset')\n        const nonPartyMembersStructCount = this.readHeaderField('nonPartyMembersStructCount')\n        const structSize = 352\n\n        for (let i = 0, iMax = partyMembersStructCount; i < iMax; i++) {\n            this._partyMembersStructsOffsets.push(partyMembersStructOffset + (structSize * i))\n        }\n        for (let i = 0, iMax = nonPartyMembersStructCount; i < iMax; i++) {\n            this._nonPartyMembersStructsOffsets.push(nonPartyMembersStructOffset + (structSize * i))\n        }\n        for (let i = 0, iMax = partyMembersStructCount; i < iMax; i++) {\n            this._partyMembersCreOffsets.push(this.readNpcStructField(i, 'creOffset'))\n        }\n        for (let i = 0, iMax = nonPartyMembersStructCount; i < iMax; i++) {\n            this._nonPartyMembersCreOffsets.push(this.readNpcStructField(i, 'creOffset', false))\n        }\n        for (let i = 0, iMax = partyMembersStructCount; i < iMax; i++) {\n            this._partyMembersStatsOffsets.push(this._partyMembersStructsOffsets[i] + 0x00e4)\n        }\n        for (let i = 0, iMax = nonPartyMembersStructCount; i < iMax; i++) {\n            this._nonPartyMembersStatsOffsets.push(this._nonPartyMembersStructsOffsets[i] + 0x00e4)\n        }\n\n        // Locate proficiencies of party members by pattern.\n        // TODO: investigate how to locate these offsets more efficiently\n        // TODO: investigate how to distinguish proficiencies for 1st / 2nd dual class case\n        const pattern = [\n            'e9', '00', '00', '00',\n            '??', '00', '00', '00', // ?\n            '00', '00', '00', '00',\n            '??', '00', '00', '00', // Weapon proficiency\n            '??', '00', '00', '00', // Proficiency type\n            '09', '00', '00', '00',\n            '00', '00', '00', '00',\n            '64', '00'\n        ]\n        for (let i = 0, iMax = partyMembersStructCount; i < iMax; i++) {\n            let proficienciesOffsets = [];\n            let o = this.readNpcStructField(i, 'creOffset')\n            let oMax = o + this.readNpcStructField(i, 'creSize')\n            for (; o < oMax; o++) {\n                for (let p = 0, pMax = pattern.length; p < pMax; p++) {\n                    if (pattern[p] === '??') {\n                        continue;\n                    }\n                    if (this._hexArray[o + p] !== pattern[p]) {\n                        break;\n                    }\n                    if (p === (pattern.length - 1)) { // Pattern match!\n                        proficienciesOffsets.push(o)\n                    }\n                }\n            }\n            this._partyMembersProficienciesOffsets.push(proficienciesOffsets)\n        }\n        for (let i = 0, iMax = nonPartyMembersStructCount; i < iMax; i++) {\n            let proficienciesOffsets2 = [];\n            let o = this.readNpcStructField(i, 'creOffset', false)\n            let oMax = o + this.readNpcStructField(i, 'creSize', false)\n            for (; o < oMax; o++) {\n                for (let p = 0, pMax = pattern.length; p < pMax; p++) {\n                    if (pattern[p] === '??') {\n                        continue;\n                    }\n                    if (this._hexArray[o + p] !== pattern[p]) {\n                        break;\n                    }\n                    if (p === (pattern.length - 1)) { // Pattern match!\n                        proficienciesOffsets2.push(o)\n                    }\n                }\n            }\n            this._nonPartyMembersProficienciesOffsets.push(proficienciesOffsets2)\n        }\n    }\n\n    /**\n     * @param offset Offset\n     * @param size Size (in bytes)\n     * @returns {number}\n     * @private\n     */\n    _getIntLittleEndian(offset, size) {\n        return parseInt('0x' + this._hexArray.slice(offset, offset + size).reverse().join(''), 16);\n    }\n\n    /**\n     * @param offset Offset\n     * @param size Size (in bytes)\n     * @returns {number}\n     * @private\n     */\n    _getIntBigEndian(offset, size) {\n        return parseInt('0x' + this._hexArray.slice(offset, offset + size).join(''), 16);\n    }\n\n    /**\n     * @param offset Offset\n     * @param size Size (in bytes)\n     * @returns {String}\n     * @private\n     */\n    _toBinaryString(offset, size) {\n        return this._getIntBigEndian(offset, size).toString(2).padStart(size * 8, '0')\n    }\n\n    /**\n     * @param offset Offset\n     * @param size Size (in bytes)\n     * @param removePadding Remove empty bytes (0x00) from the end\n     * @returns {number}\n     */\n    _getCharsString(offset, size, removePadding = true) {\n        if (!removePadding) {\n            return this._hexArray.slice(offset, offset + size)\n                .map(hex => String.fromCharCode(parseInt(hex, 16)))\n                .join('')\n        }\n\n        let bytes = this._hexArray.slice(offset, offset + size).reverse()\n        let paddingCount = 0;\n        for (const i in bytes) {\n            if (bytes[i] === '00') {\n                ++paddingCount;\n                continue;\n            }\n            break;\n        }\n\n        if (paddingCount > 0) {\n            return bytes.slice(paddingCount)\n                .reverse()\n                .map(hex => String.fromCharCode(parseInt(hex, 16)))\n                .join('')\n        }\n\n        return bytes.reverse()\n            .map(hex => String.fromCharCode(parseInt(hex, 16)))\n            .join('')\n    }\n\n    _readOffsetValue({offset, size, id}) {\n        switch (id) {\n            case 'isPartyMember':\n                return 1 === this._getIntLittleEndian(offset, size)\n            case 'creatureFlags':\n                return this._toBinaryString(offset, size)\n            case 'mediumPortrait':\n            case 'largePortrait':\n            case 'name':\n            case 'characterName':\n            case 'characterCurrentArea':\n            case 'firstLetterOfCre':\n            case 'nonPcCharsName':\n                return this._getCharsString(offset, size)\n            case 'signature':\n            case 'version':\n                return this._getCharsString(offset, size, false)\n            case 'timeInParty':\n            case 'timeJoined':\n                return secondsToDhms(this._getIntLittleEndian(offset, size) * 15)\n            case 'gameTime':\n                return secondsToDhms((this._getIntLittleEndian(offset, size) - 2100) * 12)\n            case 'partyReputation':\n            case 'reputation':\n                return this._getIntLittleEndian(offset, size) / 10\n            case 'thac0':\n            case 'attacksPerRound':\n            case 'saveVsDeath':\n            case 'saveVsWands':\n            case 'saveVsPolymorph':\n            case 'saveVsBreath':\n            case 'saveVsSpells':\n                const int8 = this._getIntLittleEndian(offset, size)\n                return int8 < 128 ? int8 : -(256 - int8);\n            case 'acNatural':\n            case 'acEffective':\n            case 'acCrushing':\n            case 'acMissile':\n            case 'acPiercing':\n            case 'acSlashing':\n                const int16 = this._getIntLittleEndian(offset, size)\n                return int16 < 32768 ? int16 : -(65536 - int16);\n            case 'partyGold':\n            case 'goldCarried':\n            case 'experiencePoints':\n            case 'experienceForKill':\n            case 'currentHitPoints':\n            case 'maxHitPoints':\n            case 'resistFire':\n            case 'resistCold':\n            case 'resistElectricity':\n            case 'resistAcid':\n            case 'resistMagic':\n            case 'resistMagicFire':\n            case 'resistMagicCold':\n            case 'resistSlashing':\n            case 'resistCrushing':\n            case 'resistPiercing':\n            case 'resistMissile':\n            case 'hideInShadows':\n            case 'detectIllusion':\n            case 'setTraps':\n            case 'lockpicking':\n            case 'moveSilently':\n            case 'findDisarmTraps':\n            case 'pickPockets':\n            case 'loreLevel':\n            case 'fatigue':\n            case 'intoxication':\n            case 'luck':\n            case 'turnUndead':\n            case 'trackingSkill':\n            case 'level1':\n            case 'level2':\n            case 'level3':\n            case 'strength':\n            case 'strengthBonus':\n            case 'intelligence':\n            case 'wisdom':\n            case 'dexterity':\n            case 'constitution':\n            case 'charisma':\n            case 'morale':\n            case 'moraleBreak':\n            case 'moraleRecoveryTime':\n            case 'partyMembersStructOffset':\n            case 'partyMembersStructCount':\n            case 'partyInventoryOffset':\n            case 'partyInventoryCount':\n            case 'nonPartyMembersStructOffset':\n            case 'nonPartyMembersStructCount':\n            case 'globalNamespaceVariablesOffset':\n            case 'globalNamespaceVariablesCount':\n            case 'racialEnemy':\n            case 'enemyAlly':\n            case 'general':\n            case 'race':\n            case 'class':\n            case 'specific':\n            case 'gender':\n            case 'kit':\n            case 'alignment':\n            case 'strongestKillXP':\n            case 'chapterKillsXP':\n            case 'chapterKillsCount':\n            case 'gameKillsXP':\n            case 'gameKillsCount':\n            case 'strongestKillName':\n            case 'animation':\n            case 'metalColour':\n            case 'minorColour':\n            case 'majorColour':\n            case 'skinColour':\n            case 'leatherColour':\n            case 'armorColour':\n            case 'hairColour':\n            case 'creOffset':\n            case 'creSize':\n            case 'weaponProficiency':\n            case 'proficiencyType':\n                return this._getIntLittleEndian(offset, size)\n            default:\n                throw 'Field getter not defined'\n        }\n    }\n}\n","export const portraits = [\n    'AJANTISM',\n    'ALORAM',\n    'BAELOTHM',\n    'BDIMOENM',\n    'BDORCF1M',\n    'BDORCM1M',\n    'BDSHAF1M',\n    'BDSHAM1M',\n    'BDTMAM',\n    'BDTMBM',\n    'BDTMCM',\n    'BDTMDM',\n    'BDTMEM',\n    'BDTMFM',\n    'BDTMGM',\n    'BDTMHM',\n    'BDTMIM',\n    'BDTMJLM',\n    'BDTMKLM',\n    'BDVICONM',\n    'BRANWEM',\n    'CAELARM',\n    'CORANM',\n    'DORNLM',\n    'DYNAHEIM',\n    'EDWINM',\n    'ELDOTHM',\n    'FALDORNM',\n    'GARRICKM',\n    'GENDWRFM',\n    'GENMELFM',\n    'GENMHLFM',\n    'GLINTM',\n    'HELMM',\n    'HEPHERNM',\n    'HVLNM',\n    'IMOENM',\n    'JAHEIRAM',\n    'KAGAINM',\n    'KHALIDM',\n    'KIVANM',\n    'MAN1M',\n    'MAN2M',\n    'MANLEY0M',\n    'MANLEY1M',\n    'MANLEY2M',\n    'MANLEY3M',\n    'MANLEY4M',\n    'MANLEY5M',\n    'MANLEY7M',\n    'MANLEY8M',\n    'MANLEY9M',\n    'MANLEYXM',\n    'MINSCM',\n    'MKHIINM',\n    'MONTARM',\n    'NAERIEM',\n    'NANOMENM',\n    'NCERNDM',\n    'NEDWINM',\n    'NEERAM',\n    'NHAERM',\n    'NHORCM',\n    'NIMOENM',\n    'NJAHEIRM',\n    'NJANM',\n    'NKELDORM',\n    'NKORGANM',\n    'NMAZZYM',\n    'NMINSCM',\n    'NNALIAM',\n    'NVALYGAM',\n    'NVICONM',\n    'NYOSHIMM',\n    'OHHEXM',\n    'OHHEXXM',\n    'QUAYLEM',\n    'RASAADM',\n    'SAFANAM',\n    'SAREVOKM',\n    'SCHAELM',\n    'SHARTELM',\n    'SKANM',\n    'SKIEM',\n    'TIAXM',\n    'UNKOWNM',\n    'UNNAMEDM',\n    'VICONIAM',\n    'VOGHILNM',\n    'WILSONM',\n    'WOMAN1M',\n    'WOMAN2M',\n    'XANM',\n    'XZARM',\n    'YANNER1M',\n    'YANNER2AM',\n    'YANNER2BM',\n    'YANNER2CM',\n    'YANNER2DM',\n    'YANNER2EM',\n    'YANNER2FM',\n    'YANNER2M',\n    'YANNER3M',\n    'YANNER4M',\n    'YANNER5M',\n    'YANNER6M',\n    'YESLICKM',\n]\n","export const genders = {\n    1: \"MALE\",\n    2: \"FEMALE\",\n    3: \"OTHER\",\n    4: \"NIETHER\",\n    5: \"BOTH\",\n    6: \"SUMMONED\",\n    7: \"ILLUSIONARY\",\n    8: \"EXTRA\",\n    9: \"SUMMONED_DEMON\",\n    10: \"EXTRA2\",\n    11: \"EXTRA3\",\n    12: \"EXTRA4\",\n    13: \"EXTRA5\",\n    14: \"EXTRA6\",\n    15: \"EXTRA7\",\n    16: \"EXTRA8\",\n    17: \"EXTRA9\",\n    18: \"EXTRA10\",\n    66: \"IMPRISONED_SUMMONED\",\n}","export const races = {\n    1: \"HUMAN\",\n    2: \"ELF\",\n    3: \"HALF_ELF\",\n    4: \"DWARF\",\n    5: \"HALFLING\",\n    6: \"GNOME\",\n    7: \"HALFORC\",\n    101: \"ANKHEG\",\n    102: \"BASILISK\",\n    103: \"BEAR\",\n    104: \"CARRIONCRAWLER\",\n    105: \"DOG\",\n    106: \"DOPPLEGANGER\",\n    107: \"ETTERCAP\",\n    108: \"GHOUL\",\n    109: \"GIBBERLING\",\n    110: \"GNOLL\",\n    111: \"HOBGOBLIN\",\n    112: \"KOBOLD\",\n    113: \"OGRE\",\n    115: \"SKELETON\",\n    116: \"SPIDER\",\n    117: \"WOLF\",\n    118: \"WYVERN\",\n    119: \"SLIME\",\n    120: \"FAIRY\",\n    121: \"DEMONIC\",\n    122: \"LYCANTHROPE\",\n    123: \"BEHOLDER\",\n    124: \"MIND_FLAYER\",\n    125: \"VAMPIRE\",\n    126: \"VAMPYRE\",\n    127: \"OTYUGH\",\n    128: \"RAKSHASA\",\n    129: \"TROLL\",\n    130: \"UMBERHULK\",\n    131: \"SAHUAGIN\",\n    132: \"SHADOW\",\n    133: \"SPECTRE\",\n    134: \"WRAITH\",\n    135: \"KUO-TOA\",\n    136: \"MIST\",\n    137: \"CAT\",\n    138: \"DUERGAR\",\n    139: \"MEPHIT\",\n    140: \"MIMIC\",\n    141: \"IMP\",\n    142: \"GIANT\",\n    143: \"ORC\",\n    144: \"GOLEM\",\n    145: \"ELEMENTAL\",\n    146: \"DRAGON\",\n    147: \"GENIE\",\n    148: \"ZOMBIE\",\n    149: \"STATUE\",\n    150: \"LICH\",\n    151: \"RABBIT\",\n    152: \"GITHYANKI\",\n    153: \"TIEFLING\",\n    154: \"YUANTI\",\n    155: \"DEMILICH\",\n    156: \"SOLAR\",\n    157: \"ANTISOLAR\",\n    158: \"PLANATAR\",\n    159: \"DARKPLANATAR\",\n    160: \"BEETLE\",\n    161: \"GOBLIN\",\n    162: \"LIZARDMAN\",\n    164: \"MYCONID\",\n    165: \"BUGBEAR\",\n    166: \"FEYR\",\n    167: \"HOOK_HORROR\",\n    168: \"SHRIEKER\",\n    169: \"SALAMANDER\",\n    170: \"BIRD\",\n    171: \"MINOTAUR\",\n    172: \"DRIDER\",\n    173: \"SIMULACRUM\",\n    174: \"HARPY\",\n    175: \"SPECTRAL_UNDEAD\",\n    176: \"SHAMBLING_MOUND\",\n    177: \"CHIMERA\",\n    178: \"HALF_DRAGON\",\n    179: \"YETI\",\n    180: \"KEG\",\n    181: \"WILL-O-WISP\",\n    182: \"MAMMAL\",\n    183: \"REPTILE\",\n    184: \"TREANT\",\n    185: \"AASIMAR\",\n    199: \"ETTIN\",\n    201: \"SWORD\",\n    202: \"BOW\",\n    203: \"XBOW\",\n    204: \"STAFF\",\n    205: \"SLING\",\n    206: \"MACE\",\n    207: \"DAGGER\",\n    208: \"SPEAR\",\n    209: \"FIST\",\n    210: \"HAMMER\",\n    211: \"MORNINGSTAR\",\n    212: \"ROBES\",\n    213: \"LEATHER\",\n    214: \"CHAIN\",\n    215: \"PLATE\",\n    255: \"NO_RACE\",\n}","export const alignments = {\n    0x00: \"NONE\",\n    0x11: \"LAWFUL_GOOD\",\n    0x12: \"LAWFUL_NEUTRAL\",\n    0x13: \"LAWFUL_EVIL\",\n    0x21: \"NEUTRAL_GOOD\",\n    0x22: \"NEUTRAL\",\n    0x23: \"NEUTRAL_EVIL\",\n    0x31: \"CHAOTIC_GOOD\",\n    0x32: \"CHAOTIC_NEUTRAL\",\n    0x33: \"CHAOTIC_EVIL\",\n    0x01: \"MASK_GOOD\",\n    0x02: \"MASK_GENEUTRAL\",\n    0x03: \"MASK_EVIL\",\n    0x10: \"MASK_LAWFUL\",\n    0x20: \"MASK_LCNEUTRAL\",\n    0x30: \"MASK_CHAOTIC\",\n}\n","/*\n * Info:\n * Dual-classed characters will detect only as their new class until their original class is re-activated, then they will detect as a multi-classed character.\n * Non-player classes (values strictly greater than 21) lack weapon slots (they have a single \"attack\" attack_button button instead), every other button is the same as a MAGE skillbar ⟹ mage_skillbar.\n * They have full access to activated item abilities, even those on weapons, just not the ability to switch weapons (or ammo).\n * The only exception is the WIZARD_EYE class — it has no skillbar buttons at all.\n */\nexport const classes = {\n    1: \"MAGE\", // Detects mages (and sorcerers), though only single class & kits.\n    2: \"FIGHTER\", // Detects fighters (and monks), though only single class & kits.\n    3: \"CLERIC\", // Detects clerics, though only single class & kits.\n    4: \"THIEF\", // Detects thieves, though only single class & kits.\n    5: \"BARD\", // Detects bards, though only single class & kits.\n    6: \"PALADIN\", // Detects paladins, though only single class & kits.\n    7: \"FIGHTER_MAGE\",\n    8: \"FIGHTER_CLERIC\",\n    9: \"FIGHTER_THIEF\",\n    10: \"FIGHTER_MAGE_THIEF\",\n    11: \"DRUID\", // Detects druids, though only single class & kits.\n    12: \"RANGER\", // Detects ranger, though only single class & kits.\n    13: \"MAGE_THIEF\",\n    14: \"CLERIC_MAGE\",\n    15: \"CLERIC_THIEF\",\n    16: \"FIGHTER_DRUID\",\n    17: \"FIGHTER_MAGE_CLERIC\",\n    18: \"CLERIC_RANGER\",\n    19: \"SORCERER\", // Detects sorcerers, though only single class.\n    20: \"MONK\", // Detects monks, though only single class.\n    101: \"ANKHEG\",\n    102: \"BASILISK\",\n    103: \"BASILISK_GREATER\",\n    104: \"BEAR_BLACK\",\n    105: \"BEAR_BROWN\",\n    106: \"BEAR_CAVE\",\n    107: \"BEAR_POLAR\",\n    108: \"CARRIONCRAWLER\",\n    109: \"DOG_WILD\",\n    110: \"DOG_WAR\",\n    111: \"DOPPLEGANGER\",\n    112: \"DOPPLEGANGER_GREATER\",\n    113: \"DRIZZT\",\n    114: \"ELMINSTER\",\n    115: \"ETTERCAP\",\n    116: \"GHOUL\",\n    117: \"GHOUL_REVEANT\",\n    118: \"GHOUL_GHAST\",\n    119: \"GIBBERLING\",\n    120: \"GNOLL\",\n    121: \"HOBGOBLIN\",\n    122: \"KOBOLD\",\n    123: \"KOBOLD_TASLOI\",\n    124: \"KOBOLD_XVART\",\n    125: \"OGRE\",\n    126: \"OGRE_MAGE\",\n    127: \"OGRE_HALFOGRE\",\n    128: \"OGRE_OGRILLON\",\n    129: \"SAREVOK\",\n    130: \"FAIRY_SIRINE\",\n    131: \"FAIRY_DRYAD\",\n    132: \"FAIRY_NEREID\",\n    133: \"FAIRY_NYMPH\",\n    134: \"SKELETON\",\n    135: \"SKELETON_WARRIOR\",\n    136: \"SKELETON_BANEGUARD\",\n    137: \"SPIDER_GIANT\",\n    138: \"SPIDER_HUGE\",\n    139: \"SPIDER_PHASE\",\n    140: \"SPIDER_SWORD\",\n    141: \"SPIDER_WRAITH\",\n    142: \"VOLO\",\n    143: \"WOLF\",\n    144: \"WOLF_WORG\",\n    145: \"WOLF_DIRE\",\n    146: \"WOLF_WINTER\",\n    147: \"WOLF_VAMPIRIC\",\n    148: \"WOLF_DREAD\",\n    149: \"WYVERN\",\n    150: \"OLIVE_SLIME\",\n    151: \"MUSTARD_JELLY\",\n    152: \"OCRE_JELLY\",\n    153: \"GREY_OOZE\",\n    154: \"GREEN_SLIME\",\n    155: \"INNOCENT\",\n    156: \"FLAMING_FIST\",\n    157: \"WEREWOLF\",\n    158: \"WOLFWERE\",\n    159: \"DEATHKNIGHT\",\n    160: \"TANARI\",\n    161: \"BEHOLDER\",\n    162: \"MIND_FLAYER\",\n    163: \"VAMPIRE\",\n    164: \"VAMPYRE\",\n    165: \"OTYUGH\",\n    166: \"RAKSHASA\",\n    167: \"TROLL\",\n    168: \"UMBERHULK\",\n    169: \"SAHUAGIN\",\n    170: \"SHADOW\",\n    171: \"SPECTRE\",\n    172: \"WRAITH\",\n    173: \"KUO-TOA\",\n    174: \"MIST\",\n    175: \"CAT\",\n    176: \"DUERGAR\",\n    177: \"MEPHIT\",\n    178: \"MIMIC\",\n    179: \"IMP\",\n    180: \"GIANT\",\n    181: \"ORC\",\n    182: \"GOLEM_IRON\",\n    183: \"GOLEM_FLESH\",\n    184: \"GOLEM_STONE\",\n    185: \"GOLEM_CLAY\",\n    186: \"ELEMENTAL_AIR\",\n    187: \"ELEMENTAL_FIRE\",\n    188: \"ELEMENTAL_EARTH\",\n    189: \"SPIDER_CENTEOL\",\n    190: \"RED_DRAGON\",\n    191: \"SHADOW_DRAGON\",\n    192: \"SILVER_DRAGON\",\n    193: \"GENIE_DJINNI\",\n    194: \"GENIE_DAO\",\n    195: \"GENIE_EFREETI\",\n    196: \"GENIE_NOBLE_DJINNI\",\n    197: \"GENIE_NOBLE_EFREETI\",\n    198: \"ZOMBIE_NORMAL\",\n    199: \"FOOD_CREATURE\",\n    200: \"HUNTER_CREATURE\",\n    201: \"LONG_SWORD\",\n    // 202: \"LONG_BOW\",\n    202: \"MAGE_ALL\", // Detects mages, including single class, kits, multi-class, and dual-class, as well as sorcerers.\n    203: \"FIGHTER_ALL\", // Detects fighters, including single class, kits, multi-class, and dual-class, as well as monks.\n    204: \"CLERIC_ALL\", // Detects clerics, including single class, kits, multi-class, and dual-class.\n    205: \"THIEF_ALL\", // Detects thieves, including single class, kits, multi-class, and dual-class.\n    206: \"BARD_ALL\", // Detects bards, including single class, kits, multi-class, and dual-class.\n    207: \"PALADIN_ALL\", // Detects paladins, including single class, kits, multi-class, and dual-class.\n    208: \"DRUID_ALL\", // Detects druids, including single class, kits, multi-class, and dual-class.\n    209: \"RANGER_ALL\", // Detects rangers, including single class, kits, multi-class, and dual-class.\n    210: \"WIZARD_EYE\",\n    211: \"CANDLEKEEP_WATCHER\",\n    212: \"AMNISH_SOLDIER\",\n    213: \"TOWN_GUARD\",\n    219: \"ELEMENTAL_WATER\",\n    220: \"GREEN_DRAGON\",\n    221: \"SOD_TMP\",\n    222: \"SPECTRAL_TROLL\",\n    223: \"WIGHT\",\n    255: \"NO_CLASS\",\n}\n","export const kits = {\n    0x00000000: \"NONE\",\n    0x00004000: \"KIT_BARBARIAN\",\n    0x40000000: \"KIT_TRUECLASS\",\n    0x40010000: \"KIT_BERSERKER\",\n    0x40020000: \"KIT_WIZARDSLAYER\",\n    0x40030000: \"KIT_KENSAI\",\n    0x40040000: \"KIT_CAVALIER\",\n    0x40050000: \"KIT_INQUISITOR\",\n    0x40060000: \"KIT_UNDEADHUNTER\",\n    0x40070000: \"KIT_ARCHER\",\n    0x40080000: \"KIT_STALKER\",\n    0x40090000: \"KIT_BEASTMASTER\",\n    0x400A0000: \"KIT_ASSASSIN\",\n    0x400B0000: \"KIT_BOUNTYHUNTER\",\n    0x400C0000: \"KIT_SWASHBUCKLER\",\n    0x400D0000: \"KIT_BLADE\",\n    0x400E0000: \"KIT_JESTER\",\n    0x400F0000: \"KIT_SKALD\",\n    0x40100000: \"KIT_TOTEMIC\",\n    0x40110000: \"KIT_SHAPESHIFTER\",\n    0x40120000: \"KIT_AVENGER\",\n    0x40130000: \"KIT_GODTALOS\",\n    0x40140000: \"KIT_GODHELM\",\n    0x40150000: \"KIT_GODLATHANDER\",\n    0x00400000: \"ABJURER\",\n    0x00800000: \"CONJURER\",\n    0x01000000: \"DIVINER\",\n    0x02000000: \"ENCHANTER\",\n    0x04000000: \"ILLUSIONIST\",\n    0x08000000: \"INVOKER\",\n    0x10000000: \"NECROMANCER\",\n    0x20000000: \"TRANSMUTER\",\n}\n","export const eas = {\n    0: \"ANYONE\", // Includes all allegiances.\n    1: \"INANIMATE\", // E.g. Sun Statue in Temple of Amaunator (rngsta01.cre)\n    2: \"PC\", // Regular party members.\n    3: \"FAMILIAR\", // Familiars of mages.\n    4: \"ALLY\",\n    5: \"CONTROLLED\", // Creatures fully under control of the player.\n    6: \"CHARMED\", // Uncontrolled ally (green selection circle) of the player.\n    7: \"REALLYCHARMED\", // Creatures fully under control of the player.\n    28: \"GOODBUTRED\", // Creatures of same allegiance as party, but uses red (hostile) selection circles. Can not be controlled by the player.\n    29: \"GOODBUTBLUE\", // Creatures of same allegiance as party, but uses blue (neutral) selection circles. Can not be controlled by the player.\n    30: \"GOODCUTOFF\", // Used by script actions and triggers. Includes all party-friendly allegiances.\n    31: \"NOTGOOD\", // Used by script actions and triggers. Includes everything except party-friendly allegiances.\n    126: \"ANYTHING\",\n    127: \"AREAOBJECT\", // Doors, Containers, Regions and Animations. It is included in EA groups NOTGOOD, ANYTHING, and NOTEVIL.\n    128: \"NEUTRAL\",\n    198: \"NOTNEUTRAL\", // Used by neutrals when targeting with enemy-only spells.\n    199: \"NOTEVIL\", // Used by script actions and triggers. Includes everything except hostile allegiances.\n    200: \"EVILCUTOFF\", // Used by script actions and triggers. Includes all hostile allegiances.\n    201: \"EVILBUTGREEN\", // Hostile creatures, but uses green (friendly) selection circles.\n    202: \"EVILBUTBLUE\", // Hostile creatures, but uses blue (neutral) selection circles.\n    254: \"CHARMED_PC\", // This is just a separate EA from ENEMY for detection purposes. They're still valid objects for EVILCUTOFF and NearestEnemyOf(), but not by ENEMY. It's not specific to PCs.\n    255: \"ENEMY\", // Creatures that are hostile to the party and allied creatures.\n}\n","export const proficiencies = {\n    89: \"Bastard sword\",\n    90: \"Long sword\",\n    91: \"Short sword\",\n    92: \"Axe\",\n    93: \"Two handed sword\",\n    94: \"Katana\",\n    95: \"Scimitar/wakizashi/ninjato\",\n    96: \"Dagger\",\n    97: \"Warhammer\",\n    98: \"Spear\",\n    99: \"Halberd\",\n    100: \"Flail/morningstar\",\n    101: \"Mace\",\n    102: \"Quarterstaff\",\n    103: \"Crossbow\",\n    104: \"Longbow\",\n    105: \"Shortbow\",\n    106: \"Dart\",\n    107: \"Sling\",\n    108: \"Blackjack\",\n    111: \"Two handed weapons\",\n    112: \"Sword and shield\",\n    113: \"Single weapon\",\n    114: \"Two weapons style\",\n    115: \"Club\",\n}\n","<script>\n    import {onMount} from \"svelte\";\n    import {GamV20HexEditor} from \"./lib/GamV20HexEditor\";\n    import {portraits} from \"./data/portraits\";\n    import {genders} from \"./data/genders\";\n    import {races} from \"./data/races\";\n    import {alignments} from \"./data/alignments\";\n    import {classes} from \"./data/classes\";\n    import {kits} from \"./data/kits\";\n    import {eas} from \"./data/eas\";\n    import {proficiencies} from \"./data/proficiencies\";\n\n    export let version;\n\n    let fileinput\n    let filename\n    let isReady = false\n    let isLoading = false\n    let hexEditor\n    let activeTab = 0\n    let current_character_idx = 0\n\n    onMount(async () => {\n        const file = localStorage.getItem('file')\n        if (file === null) {\n            return\n        }\n\n        isLoading = true\n\n        const uint8array = JSON.parse(file);\n        hexEditor = new GamV20HexEditor(uint8array);\n\n        if (hexEditor.isValidGamFile) {\n            filename = localStorage.getItem('filename')\n            if (null !== localStorage.getItem('activeTab')) {\n                activeTab = parseInt(localStorage.getItem('activeTab'), 10)\n            }\n            if (null !== localStorage.getItem('current_character')) {\n                current_character_idx = parseInt(localStorage.getItem('current_character'), 10)\n            }\n            isReady = true\n        } else {\n            localStorage.removeItem('file');\n            localStorage.removeItem('filename')\n            localStorage.removeItem('current_character')\n\n            isReady = false\n        }\n        isLoading = false\n    });\n\n    const onFileSelected = (e) => {\n        if (!e.target.files || !e.target.files[0]) { // No file selected\n            isReady = hexEditor && hexEditor.isValidGamFile // Check if we still have a valid file loaded\n            return\n        }\n\n        isReady = false\n        isLoading = true\n\n        const inputFileName = e.target.files[0].name\n\n        const reader = new FileReader()\n        reader.readAsArrayBuffer(e.target.files[0])\n\n        reader.onload = e => {\n            let res = [];\n            // noinspection JSCheckFunctionSignatures\n            let uint8array = new Uint8Array(e.target.result);\n            for (let i in uint8array) {\n                res.push((0 + uint8array[i].toString(16)).slice(-2));\n            }\n\n            hexEditor = new GamV20HexEditor(uint8array);\n            if (hexEditor.isValidGamFile) {\n                localStorage.setItem('file', JSON.stringify(res))\n                localStorage.setItem('filename', inputFileName)\n\n                current_character_idx = 0\n                localStorage.setItem('current_character', current_character_idx)\n\n                filename = inputFileName\n                isReady = true\n            } else {\n                localStorage.removeItem('file')\n                localStorage.removeItem('filename')\n                localStorage.removeItem('current_character')\n                isReady = false\n            }\n            isLoading = false\n        }\n    }\n\n    const getPcPortraitUrl = (characterIdx) => {\n        const mediumPortrait = hexEditor?.readCreField(characterIdx, 'mediumPortrait');\n        if (!portraits.includes(mediumPortrait)) {\n            return '/portraits/UNKOWNM.png';\n        }\n        return '/portraits/' + mediumPortrait + '.png';\n    }\n\n    const onTabClick = (tabIdx) => {\n        activeTab = tabIdx\n        localStorage.setItem('activeTab', tabIdx)\n    }\n\n    const getCharacterName = (characterIdx) => {\n        if (characterIdx === 0) {\n            return hexEditor?.readNpcStructField(current_character_idx, 'name')\n        }\n        return hexEditor?.readCreField(characterIdx, 'nonPcCharsName', true)\n    }\n\n    const switchCharacter = (e) => {\n        current_character_idx = parseInt(e.target.value, 10)\n        localStorage.setItem('current_character', current_character_idx)\n    }\n</script>\n\n<main>\n    <div class=\"window-container\" style=\"\">\n        <div class=\"instructions-container\">\n            <div class=\"instructions\">\n                <ul>\n                    <li>Click on File to upload the BALDUR.gam file within your saved game directory</li>\n                    <li>You may use this demo file: <a href=\"/BALDUR.gam\" download>BALDUR.gam</a></li>\n                </ul>\n            </div>\n        </div>\n        <div class=\"window outer-window\">\n            <div class=\"title-bar\">\n                <div class=\"title-bar-text\"><span class=\"logo\"></span> JSEE Keeper - Version {version}</div>\n                <div class=\"title-bar-controls\">\n                    <button aria-label=\"Minimize\"></button>\n                    <button aria-label=\"Maximize\"></button>\n                    <button aria-label=\"Close\"></button>\n                </div>\n            </div>\n            <div class=\"toolbar\">\n                <input style=\"display: none;\" type=\"file\" accept=\".gam\" on:change={(e) => onFileSelected(e)} bind:this={fileinput}>\n                <button id=\"file-button\" on:click={() => {fileinput?.click()}}><u>F</u>ile</button>\n                <button><u>E</u>dit</button>\n                <button><u>V</u>iew</button>\n                <button><u>T</u>ools</button>\n                <button><u>S</u>ettings</button>\n                <button><u>W</u>indow</button>\n                <button><u>H</u>elp</button>\n            </div>\n            <div class=\"window-body\">\n                <div class=\"outer-inner-window-container inner-window-container\">\n                    {#if isReady}\n                        <div class=\"window inner-window\">\n                            <div class=\"title-bar\">\n                                <div class=\"title-bar-text\"><span class=\"logo\"></span> {filename}</div>\n                                <div class=\"title-bar-controls\">\n                                    <button aria-label=\"Minimize\"></button>\n                                    <button aria-label=\"Maximize\"></button>\n                                    <button aria-label=\"Close\"></button>\n                                </div>\n                            </div>\n                            <div class=\"window-body\">\n                                <div class=\"inner-window-container inner-inner-window-container\">\n                                    <div class=\"character-window\">\n                                        <div class=\"portrait-column\">\n                                            <div class=\"field-row character-name-row\">\n                                                <input id=\"name\" disabled type=\"text\" value=\"{getCharacterName(current_character_idx)}\"/>\n                                            </div>\n                                            <div class=\"portrait\" style=\"background-image: url({getPcPortraitUrl(current_character_idx)})\"></div>\n                                            <button class=\"change-portrait\" disabled>Change Portrait</button>\n                                            <div class=\"field-row character-selector-row\">\n                                                <input id=\"characterSelector\" class=\"has-box-indicator\" type=\"range\" min=\"0\"\n                                                       on:change={e => switchCharacter(e)}\n                                                       max=\"{hexEditor?.readHeaderField('partyMembersStructCount') - 1}\"\n                                                       step=\"1\" value=\"{current_character_idx}\" />\n                                            </div>\n                                        </div>\n                                        <div class=\"tabs-column\">\n                                            <div class=\"tabs\">\n                                                <div class=\"tab\" class:active={activeTab === 0} on:click={() => onTabClick(0)}><u>A</u>bilities</div>\n                                                <div class=\"tab\" class:active={activeTab === 1} on:click={() => onTabClick(1)}>Characteristics</div>\n                                                <div class=\"tab\" class:active={activeTab === 2} on:click={() => onTabClick(2)}>Resistances</div>\n                                                <div class=\"tab\" class:active={activeTab === 3} on:click={() => onTabClick(3)}>Proficiencies</div>\n                                            </div>\n                                            <div class=\"tab-contents\">\n                                                <div class=\"tab-content\" class:active={activeTab === 0}>\n                                                    <div class=\"abilities-column\">\n                                                        <div class=\"abilities-row\">\n                                                            <div class=\"field-row\">\n                                                                <label for=\"strength\">Strength</label>\n                                                                <input id=\"strength\" class=\"short-input\" type=\"text\" value=\"{hexEditor?.readCreField(current_character_idx, 'strength')}\" />\n                                                            </div>\n                                                            <div class=\"field-row\">\n                                                                <label for=\"constitution\">Constitution</label>\n                                                                <input id=\"constitution\" class=\"short-input\" type=\"text\" value=\"{hexEditor?.readCreField(current_character_idx, 'constitution')}\" />\n                                                            </div>\n                                                            <div class=\"field-row\">\n                                                                <label for=\"charisma\">Charisma</label>\n                                                                <input id=\"charisma\" class=\"short-input\" type=\"text\" value=\"{hexEditor?.readCreField(current_character_idx, 'charisma')}\" />\n                                                            </div>\n                                                        </div>\n                                                        <div class=\"abilities-row\">\n                                                            <div class=\"field-row\">\n                                                                <label for=\"strengthBonus\">Strength +</label>\n                                                                <input id=\"strengthBonus\" class=\"short-input\" type=\"text\" value=\"{hexEditor?.readCreField(current_character_idx, 'strengthBonus')}\" />\n                                                            </div>\n                                                            <div class=\"field-row\">\n                                                                <label for=\"intelligence\">Intelligence</label>\n                                                                <input id=\"intelligence\" class=\"short-input\" type=\"text\" value=\"{hexEditor?.readCreField(current_character_idx, 'intelligence')}\" />\n                                                            </div>\n                                                        </div>\n                                                        <div class=\"abilities-row\">\n                                                            <div class=\"field-row\">\n                                                                <label for=\"dexterity\">Dexterity</label>\n                                                                <input id=\"dexterity\" class=\"short-input\" type=\"text\" value=\"{hexEditor?.readCreField(current_character_idx, 'dexterity')}\" />\n                                                            </div>\n                                                            <div class=\"field-row\">\n                                                                <label for=\"wisdom\">Wisdom</label>\n                                                                <input id=\"wisdom\" class=\"short-input\" type=\"text\" value=\"{hexEditor?.readCreField(current_character_idx, 'wisdom')}\" />\n                                                            </div>\n                                                        </div>\n                                                        <div class=\"abilities-row-separator\"></div>\n                                                        <div class=\"abilities-row\">\n                                                            <div class=\"field-row\">\n                                                                <label for=\"maxHitPoints\">Base HP</label>\n                                                                <input id=\"maxHitPoints\" class=\"short-input\" type=\"text\" value=\"{hexEditor?.readCreField(current_character_idx, 'maxHitPoints')}\" />\n                                                            </div>\n                                                            <div class=\"field-row\">\n                                                                <label for=\"attacksPerRound\">Attacks</label>\n                                                                <input id=\"attacksPerRound\" class=\"long-input\" type=\"text\" value=\"{hexEditor?.readCreField(current_character_idx, 'attacksPerRound')}\" />\n                                                            </div>\n                                                            <div class=\"field-row\">\n                                                                <label class=\"long-label\" for=\"fatigue\">Fatigue</label>\n                                                                <input id=\"fatigue\" class=\"short-input\" type=\"text\" value=\"{hexEditor?.readCreField(current_character_idx, 'fatigue')}\" />\n                                                            </div>\n                                                        </div>\n                                                        <div class=\"abilities-row\">\n                                                            <div class=\"field-row\">\n                                                                <label for=\"currentHitPoints\">Current HP</label>\n                                                                <input id=\"currentHitPoints\" class=\"short-input\" type=\"text\" value=\"{hexEditor?.readCreField(current_character_idx, 'currentHitPoints')}\" />\n                                                            </div>\n                                                            <div class=\"field-row\">\n                                                                <label for=\"experiencePoints\">Experience</label>\n                                                                <input id=\"experiencePoints\" class=\"long-input\" type=\"text\" value=\"{hexEditor?.readCreField(current_character_idx, 'experiencePoints')}\" />\n                                                            </div>\n                                                            <div class=\"field-row\">\n                                                                <label class=\"long-label\" for=\"intoxication\">Intoxication</label>\n                                                                <input id=\"intoxication\" class=\"short-input\" type=\"text\" value=\"{hexEditor?.readCreField(current_character_idx, 'intoxication')}\" />\n                                                            </div>\n                                                        </div>\n                                                        <div class=\"abilities-row\">\n                                                            <div class=\"field-row\">\n                                                                <label for=\"acNatural\">Base AC</label>\n                                                                <input id=\"acNatural\" class=\"short-input\" type=\"text\" value=\"{hexEditor?.readCreField(current_character_idx, 'acNatural')}\" />\n                                                            </div>\n                                                            <div class=\"field-row\">\n                                                                <label for=\"experienceForKill\">Exp for kill</label>\n                                                                <input id=\"experienceForKill\" class=\"long-input\" type=\"text\" value=\"{hexEditor?.readCreField(current_character_idx, 'experienceForKill')}\" />\n                                                            </div>\n                                                            <div class=\"field-row\">\n                                                                <label class=\"long-label\" for=\"morale\">Morale</label>\n                                                                <input id=\"morale\" class=\"short-input\" type=\"text\" value=\"{hexEditor?.readCreField(current_character_idx, 'morale')}\" />\n                                                            </div>\n                                                        </div>\n                                                        <div class=\"abilities-row\">\n                                                            <div class=\"field-row\">\n                                                                <label for=\"acEffective\">Effective AC</label>\n                                                                <input id=\"acEffective\" class=\"short-input\" type=\"text\" value=\"{hexEditor?.readCreField(current_character_idx, 'acEffective')}\" />\n                                                            </div>\n                                                            <div class=\"field-row\">\n                                                                <label for=\"level1\">Levels</label>\n                                                                <input id=\"level1\" class=\"shorter-input\" type=\"text\" value=\"{hexEditor?.readCreField(current_character_idx, 'level1')}\" />\n                                                                <input id=\"level2\" class=\"shorter-input\" type=\"text\" value=\"{hexEditor?.readCreField(current_character_idx, 'level2')}\" />\n                                                                <input id=\"level3\" class=\"shorter-input\" type=\"text\" value=\"{hexEditor?.readCreField(current_character_idx, 'level3')}\" />\n                                                            </div>\n                                                            <div class=\"field-row\">\n                                                                <label class=\"long-label\" for=\"moraleBreak\">Morale Break</label>\n                                                                <input id=\"moraleBreak\" class=\"short-input\" type=\"text\" value=\"{hexEditor?.readCreField(current_character_idx, 'moraleBreak')}\" />\n                                                            </div>\n                                                        </div>\n                                                        <div class=\"abilities-row\">\n                                                            <div class=\"field-row\">\n                                                                <label for=\"thac0\">THAC0</label>\n                                                                <input id=\"thac0\" class=\"short-input\" type=\"text\" value=\"{hexEditor?.readCreField(current_character_idx, 'thac0')}\" />\n                                                            </div>\n<!--                                                            <div class=\"field-row\">-->\n<!--                                                                <label for=\"goldCarried\">Gold</label>-->\n<!--                                                                <input id=\"goldCarried\" class=\"long-input\" type=\"text\" value=\"{hexEditor?.readCreField(current_character_idx, 'goldCarried')}\" />-->\n<!--                                                            </div>-->\n                                                            <div class=\"field-row\">\n                                                                <label for=\"partyGold\">Gold</label>\n                                                                <input id=\"partyGold\" class=\"long-input\" type=\"text\" value=\"{hexEditor?.readHeaderField('partyGold')}\" />\n                                                            </div>\n                                                            <div class=\"field-row\">\n                                                                <label class=\"long-label\" for=\"moraleRecoveryTime\">Morale Recovery</label>\n                                                                <input id=\"moraleRecoveryTime\" class=\"short-input\" type=\"text\" value=\"{hexEditor?.readCreField(current_character_idx, 'moraleRecoveryTime')}\" />\n                                                            </div>\n                                                        </div>\n<!--                                                        <div class=\"abilities-row\">-->\n<!--                                                            <div class=\"field-row\">-->\n<!--                                                                <label for=\"reputation\">Reputation</label>-->\n<!--                                                                <input id=\"reputation\" class=\"short-input\" type=\"text\" value=\"{hexEditor?.readCreField(current_character_idx, 'reputation')}\" />-->\n<!--                                                            </div>-->\n<!--                                                        </div>-->\n                                                        <div class=\"abilities-row\">\n                                                            <div class=\"field-row\">\n                                                                <label for=\"partyReputation\">Reputation</label>\n                                                                <input id=\"partyReputation\" class=\"short-input\" type=\"text\" value=\"{hexEditor?.readHeaderField('partyReputation')}\" />\n                                                            </div>\n                                                        </div>\n                                                    </div>\n                                                    <div class=\"thieves-column\">\n                                                        <fieldset>\n                                                            <legend>Thief Skills</legend>\n                                                            <div class=\"field-row\">\n                                                                <label class=\"long-label\" for=\"moveSilently\">Move Silently</label>\n                                                                <input id=\"moveSilently\" class=\"short-input\" type=\"text\" value=\"{hexEditor?.readHeaderField('moveSilently')}\" />\n                                                            </div>\n                                                            <div class=\"field-row\">\n                                                                <label class=\"long-label\" for=\"hideInShadows\">Hide in Shadows</label>\n                                                                <input id=\"hideInShadows\" class=\"short-input\" type=\"text\" value=\"{hexEditor?.readHeaderField('hideInShadows')}\" />\n                                                            </div>\n                                                            <div class=\"field-row\">\n                                                                <label class=\"long-label\" for=\"lockpicking\">Open Locks</label>\n                                                                <input id=\"lockpicking\" class=\"short-input\" type=\"text\" value=\"{hexEditor?.readHeaderField('lockpicking')}\" />\n                                                            </div>\n                                                            <div class=\"field-row\">\n                                                                <label class=\"long-label\" for=\"pickPockets\">Pick Pockets</label>\n                                                                <input id=\"pickPockets\" class=\"short-input\" type=\"text\" value=\"{hexEditor?.readHeaderField('pickPockets')}\" />\n                                                            </div>\n                                                            <div class=\"field-row\">\n                                                                <label class=\"long-label\" for=\"findDisarmTraps\">Find Traps</label>\n                                                                <input id=\"findDisarmTraps\" class=\"short-input\" type=\"text\" value=\"{hexEditor?.readHeaderField('findDisarmTraps')}\" />\n                                                            </div>\n                                                            <div class=\"field-row\">\n                                                                <label class=\"long-label\" for=\"setTraps\">Set Traps</label>\n                                                                <input id=\"setTraps\" class=\"short-input\" type=\"text\" value=\"{hexEditor?.readHeaderField('setTraps')}\" />\n                                                            </div>\n                                                            <div class=\"field-row\">\n                                                                <label class=\"long-label\" for=\"detectIllusion\">Detect Illusions</label>\n                                                                <input id=\"detectIllusion\" class=\"short-input\" type=\"text\" value=\"{hexEditor?.readHeaderField('detectIllusion')}\" />\n                                                            </div>\n                                                        </fieldset>\n                                                    </div>\n                                                </div>\n                                                <div class=\"tab-content\" class:active={activeTab === 1}>\n                                                    <div class=\"characteristics-column\">\n                                                        <div class=\"abilities-row\">\n                                                            <div class=\"field-row\">\n                                                                <label for=\"gender\">Gender</label>\n                                                                <select id=\"gender\" value={hexEditor?.readCreField(current_character_idx, 'gender').toString()}>\n                                                                    <option value=\"\"></option>\n                                                                    {#each Object.entries(genders) as [key, label]}\n                                                                        <option value={key}>{label}</option>\n                                                                    {/each}\n                                                                </select>\n                                                            </div>\n                                                        </div>\n                                                        <div class=\"abilities-row\">\n                                                            <div class=\"field-row\">\n                                                                <label for=\"race\">Race</label>\n                                                                <select id=\"race\" value={hexEditor?.readCreField(current_character_idx, 'race').toString()}>\n                                                                    <option value=\"\"></option>\n                                                                    {#each Object.entries(races) as [key, label]}\n                                                                        <option value=\"{key}\">{label}</option>\n                                                                    {/each}\n                                                                </select>\n                                                            </div>\n                                                        </div>\n                                                        <div class=\"abilities-row\">\n                                                            <div class=\"field-row\">\n                                                                <label for=\"alignment\">Alignment</label>\n                                                                <select id=\"alignment\" value={hexEditor?.readCreField(current_character_idx, 'alignment').toString()}>\n                                                                    <option value=\"\"></option>\n                                                                    {#each Object.entries(alignments) as [key, label]}\n                                                                        <option value=\"{key}\">{label}</option>\n                                                                    {/each}\n                                                                </select>\n                                                            </div>\n                                                        </div>\n                                                        <div class=\"abilities-row\">\n                                                            <div class=\"field-row\">\n                                                                <label for=\"class\">Class</label>\n                                                                <select id=\"class\" value={hexEditor?.readCreField(current_character_idx, 'class').toString()}>\n                                                                    <option value=\"\"></option>\n                                                                    {#each Object.entries(classes) as [key, label]}\n                                                                        <option value=\"{key}\">{label}</option>\n                                                                    {/each}\n                                                                </select>\n                                                            </div>\n                                                        </div>\n                                                        <!-- TODO Original class -->\n                                                        <div class=\"abilities-row\">\n                                                            <div class=\"field-row\">\n                                                                <label for=\"kit\">Kit</label>\n                                                                <select id=\"kit\" value={hexEditor?.readCreField(current_character_idx, 'kit').toString()}>\n                                                                    <option value=\"\"></option>\n                                                                    {#each Object.entries(kits) as [key, label]}\n                                                                        <option value=\"{key}\">{label}</option>\n                                                                    {/each}\n                                                                </select>\n                                                            </div>\n                                                        </div>\n                                                        <div class=\"abilities-row\">\n                                                            <div class=\"field-row\">\n                                                                <label for=\"racialEnemy\">Racial Enemy</label>\n                                                                <select id=\"racialEnemy\" value={hexEditor?.readCreField(current_character_idx, 'racialEnemy').toString()}>\n                                                                    <option value=\"\"></option>\n                                                                    {#each Object.entries(races) as [key, label]}\n                                                                        <option value=\"{key}\">{label}</option>\n                                                                    {/each}\n                                                                </select>\n                                                            </div>\n                                                        </div>\n                                                        <div class=\"abilities-row\">\n                                                            <div class=\"field-row\">\n                                                                <label for=\"enemyAlly\">Enemy/Ally</label>\n                                                                <select id=\"enemyAlly\" value={hexEditor?.readCreField(current_character_idx, 'enemyAlly').toString()}>\n                                                                    <option value=\"\"></option>\n                                                                    {#each Object.entries(eas) as [key, label]}\n                                                                        <option value=\"{key}\">{label}</option>\n                                                                    {/each}\n                                                                </select>\n                                                            </div>\n                                                        </div>\n                                                        <div class=\"abilities-row\">\n                                                            <div class=\"field-row\">\n                                                                <label for=\"movementSpeed\">Movement Speed</label>\n                                                                <!-- TODO -->\n                                                                <input id=\"movementSpeed\" disabled class=\"short-input\" type=\"text\" value=\"\" />\n                                                            </div>\n                                                        </div>\n                                                    </div>\n                                                    <div class=\"stats-column\">\n                                                        <fieldset>\n                                                            <legend>Kill Stats</legend>\n                                                            <div class=\"field-row\">\n                                                                <label class=\"long-label\" for=\"strongestKillName\">Strongest Kill</label>\n                                                                <!-- TODO hexEditor?.readCharacterStatField(current_character_idx, 'strongestKillName') -->\n                                                                <input disabled id=\"strongestKillName\" class=\"long-input\" type=\"text\" value=\"\" />\n                                                            </div>\n                                                            <div class=\"field-row\">\n                                                                <label class=\"long-label\" for=\"strongestKillXP\">Strongest Kill XP</label>\n                                                                <input id=\"strongestKillXP\" class=\"long-input\" type=\"text\" value=\"{hexEditor?.readCharacterStatField(current_character_idx, 'strongestKillXP')}\" />\n                                                            </div>\n                                                            <div class=\"field-row\">\n                                                                <label class=\"long-label\" for=\"chapterKillsCount\">Chapter Kills</label>\n                                                                <input id=\"chapterKillsCount\" class=\"long-input\" type=\"text\" value=\"{hexEditor?.readCharacterStatField(current_character_idx, 'chapterKillsCount')}\" />\n                                                            </div>\n                                                            <div class=\"field-row\">\n                                                                <label class=\"long-label\" for=\"chapterKillsXP\">Chapter Kills XP</label>\n                                                                <input id=\"chapterKillsXP\" class=\"long-input\" type=\"text\" value=\"{hexEditor?.readCharacterStatField(current_character_idx, 'chapterKillsXP')}\" />\n                                                            </div>\n                                                            <div class=\"field-row\">\n                                                                <label class=\"long-label\" for=\"gameKillsCount\">Game Kills</label>\n                                                                <input id=\"gameKillsCount\" class=\"long-input\" type=\"text\" value=\"{hexEditor?.readCharacterStatField(current_character_idx, 'gameKillsCount')}\" />\n                                                            </div>\n                                                            <div class=\"field-row\">\n                                                                <label class=\"long-label\" for=\"gameKillsXP\">Game Kills XP</label>\n                                                                <input id=\"gameKillsXP\" class=\"long-input\" type=\"text\" value=\"{hexEditor?.readCharacterStatField(current_character_idx, 'gameKillsXP')}\" />\n                                                            </div>\n                                                        </fieldset>\n                                                    </div>\n                                                </div>\n                                                <div class=\"tab-content\" class:active={activeTab === 2}>\n                                                    <div class=\"resistances-column\">\n                                                        <fieldset>\n                                                            <legend>Resistances</legend>\n                                                            <div class=\"field-row\">\n                                                                <label for=\"resistAcid\">Acid</label>\n                                                                <input id=\"resistAcid\" class=\"short-input\" type=\"text\" value=\"{hexEditor?.readCreField(current_character_idx, 'resistAcid')}\" />\n                                                            </div>\n                                                            <div class=\"field-row\">\n                                                                <label for=\"resistSlashing\">Slashing</label>\n                                                                <input id=\"resistSlashing\" class=\"short-input\" type=\"text\" value=\"{hexEditor?.readCreField(current_character_idx, 'resistSlashing')}\" />\n                                                            </div>\n                                                            <div class=\"field-row\">\n                                                                <label for=\"resistCold\">Cold</label>\n                                                                <input id=\"resistCold\" class=\"short-input\" type=\"text\" value=\"{hexEditor?.readCreField(current_character_idx, 'resistCold')}\" />\n                                                            </div>\n                                                            <div class=\"field-row\">\n                                                                <label for=\"resistMissile\">Missile</label>\n                                                                <input id=\"resistMissile\" class=\"short-input\" type=\"text\" value=\"{hexEditor?.readCreField(current_character_idx, 'resistMissile')}\" />\n                                                            </div>\n                                                            <div class=\"field-row\">\n                                                                <label for=\"resistElectricity\">Electricity</label>\n                                                                <input id=\"resistElectricity\" class=\"short-input\" type=\"text\" value=\"{hexEditor?.readCreField(current_character_idx, 'resistElectricity')}\" />\n                                                            </div>\n                                                            <div class=\"field-row\">\n                                                                <label for=\"resistMagic\">Magic</label>\n                                                                <input id=\"resistMagic\" class=\"short-input\" type=\"text\" value=\"{hexEditor?.readCreField(current_character_idx, 'resistMagic')}\" />\n                                                            </div>\n                                                            <div class=\"field-row\">\n                                                                <label for=\"resistFire\">Fire</label>\n                                                                <input id=\"resistFire\" class=\"short-input\" type=\"text\" value=\"{hexEditor?.readCreField(current_character_idx, 'resistFire')}\" />\n                                                            </div>\n                                                            <div class=\"field-row\">\n                                                                <label for=\"resistMagicFire\">Magic Fire</label>\n                                                                <input id=\"resistMagicFire\" class=\"short-input\" type=\"text\" value=\"{hexEditor?.readCreField(current_character_idx, 'resistMagicFire')}\" />\n                                                            </div>\n                                                            <div class=\"field-row\">\n                                                                <label for=\"resistCrushing\">Crushing</label>\n                                                                <input id=\"resistCrushing\" class=\"short-input\" type=\"text\" value=\"{hexEditor?.readCreField(current_character_idx, 'resistCrushing')}\" />\n                                                            </div>\n                                                            <div class=\"field-row\">\n                                                                <label for=\"resistMagicCold\">Magic Cold</label>\n                                                                <input id=\"resistMagicCold\" class=\"short-input\" type=\"text\" value=\"{hexEditor?.readCreField(current_character_idx, 'resistMagicCold')}\" />\n                                                            </div>\n                                                            <div class=\"field-row\">\n                                                                <label for=\"resistPiercing\">Piercing</label>\n                                                                <input id=\"resistPiercing\" class=\"short-input\" type=\"text\" value=\"{hexEditor?.readCreField(current_character_idx, 'resistPiercing')}\" />\n                                                            </div>\n                                                        </fieldset>\n                                                    </div>\n                                                    <div class=\"saving-throws-column\">\n                                                        <fieldset>\n                                                            <legend>Saving Throws</legend>\n                                                            <div class=\"field-row\">\n                                                                <label for=\"saveVsDeath\">Paralyzation, Poison, Death</label>\n                                                                <input id=\"saveVsDeath\" class=\"short-input\" type=\"text\" value=\"{hexEditor?.readCreField(current_character_idx, 'saveVsDeath')}\" />\n                                                            </div>\n                                                            <div class=\"field-row\">\n                                                                <label for=\"saveVsWands\">Rod, Staff, Wand</label>\n                                                                <input id=\"saveVsWands\" class=\"short-input\" type=\"text\" value=\"{hexEditor?.readCreField(current_character_idx, 'saveVsWands')}\" />\n                                                            </div>\n                                                            <div class=\"field-row\">\n                                                                <label for=\"saveVsPolymorph\">Petrification, Polymorph</label>\n                                                                <input id=\"saveVsPolymorph\" class=\"short-input\" type=\"text\" value=\"{hexEditor?.readCreField(current_character_idx, 'saveVsPolymorph')}\" />\n                                                            </div>\n                                                            <div class=\"field-row\">\n                                                                <label for=\"saveVsBreath\">Breath Weapons</label>\n                                                                <input id=\"saveVsBreath\" class=\"short-input\" type=\"text\" value=\"{hexEditor?.readCreField(current_character_idx, 'saveVsBreath')}\" />\n                                                            </div>\n                                                            <div class=\"field-row\">\n                                                                <label for=\"saveVsSpells\">Spells</label>\n                                                                <input id=\"saveVsSpells\" class=\"short-input\" type=\"text\" value=\"{hexEditor?.readCreField(current_character_idx, 'saveVsSpells')}\" />\n                                                            </div>\n                                                        </fieldset>\n                                                    </div>\n                                                    <div class=\"armour-class-column\">\n                                                        <fieldset>\n                                                            <legend>Armour Class Modifiers</legend>\n                                                            <div class=\"field-row\">\n                                                                <label for=\"acSlashing\">Slashing</label>\n                                                                <input id=\"acSlashing\" class=\"short-input\" type=\"text\" value=\"{hexEditor?.readCreField(current_character_idx, 'acSlashing')}\" />\n                                                            </div>\n                                                            <div class=\"field-row\">\n                                                                <label for=\"acMissile\">Missile</label>\n                                                                <input id=\"acMissile\" class=\"short-input\" type=\"text\" value=\"{hexEditor?.readCreField(current_character_idx, 'acMissile')}\" />\n                                                            </div>\n                                                            <div class=\"field-row\">\n                                                                <label for=\"acCrushing\">Crushing</label>\n                                                                <input id=\"acCrushing\" class=\"short-input\" type=\"text\" value=\"{hexEditor?.readCreField(current_character_idx, 'acCrushing')}\" />\n                                                            </div>\n                                                            <div class=\"field-row\">\n                                                                <label for=\"acPiercing\">Piercing</label>\n                                                                <input id=\"acPiercing\" class=\"short-input\" type=\"text\" value=\"{hexEditor?.readCreField(current_character_idx, 'acPiercing')}\" />\n                                                            </div>\n                                                        </fieldset>\n                                                    </div>\n                                                </div>\n                                                <div class=\"tab-content\" class:active={activeTab === 3}>\n                                                    <div class=\"weapons-proficiencies-column\">\n                                                        {#each hexEditor?.readCharacterProficiencies(current_character_idx) as proficiency, idx}\n                                                            <div class=\"field-row\">\n                                                                <label for={'proficiency-' . idx}>{proficiencies[proficiency.proficiencyType]}</label>\n                                                                <input id={'proficiency-' . idx} class=\"short-input\" type=\"text\" value=\"{proficiency.weaponProficiency}\"/>\n                                                            </div>\n                                                        {/each}\n                                                    </div>\n                                                </div>\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    {/if}\n                </div>\n            </div>\n            <div class=\"status-bar\">\n                <div class=\"status\">\n                    {#if isLoading}Loading...{:else if isReady}Ready{:else}&nbsp;{/if}\n                </div>\n            </div>\n        </div>\n    </div>\n</main>\n\n<style>\n    .title-bar {\n        position: relative;\n    }\n\n    .title-bar-text {\n        padding-left: 22px;\n    }\n\n    .window-container {\n        width: 100%;\n        text-align: center;\n    }\n\n    .logo {\n        display: inline-block;\n        height: 20px;\n        width: 20px;\n        /*noinspection CssUnknownTarget*/\n        background-image: url('/favicon.png');\n        background-position: center center;\n        background-size: 20px 20px;\n        position: absolute;\n        top: 0;\n        left: 2px;\n    }\n\n    .instructions-container {\n        text-align: center;\n    }\n\n    .instructions {\n        width: 800px;\n        display: inline-block;\n        text-align: left;\n    }\n\n    .outer-window {\n        width: 800px;\n        height: 600px;\n        display: inline-block;\n    }\n\n    .toolbar {\n        text-align: left;\n        padding-left: 4px;\n    }\n\n    .window-body {\n        margin: 0;\n    }\n\n    .toolbar > button {\n        display: inline-block;\n        padding: 0 5px;\n        box-shadow: none;\n        min-width: unset;\n    }\n\n    .inner-window-container {\n        box-shadow: inset -1px -1px #fff, inset 1px 1px grey, inset -2px -2px #dfdfdf, inset 2px 2px #0a0a0a;\n        display: block;\n        margin: 0;\n        padding: 2px 2px;\n    }\n\n    .outer-inner-window-container {\n        background: #808080;\n        height: 532px;\n        text-align: left;\n    }\n\n    .inner-window {\n        width: 770px;\n        height: 330px;\n        display: inline-block;\n    }\n\n    .inner-inner-window-container {\n        height: 306px;\n    }\n\n    .status {\n        min-height: 23px;\n        line-height: 23px;\n        padding-left: 4px;\n    }\n\n    .character-window {\n        padding-top: 8px;\n        padding-left: 8px;\n    }\n\n    .portrait-column {\n        width: 110px;\n        display: block;\n        float: left;\n    }\n\n    .tabs-column {\n        display: block;\n        float: left;\n        height: 270px;\n        margin-left: 8px;\n        width: 630px;\n    }\n\n    .portrait {\n        width: 110px;\n        height: 173px;\n        margin: 2px 0;\n        box-shadow: inset -1px -1px #fff, inset 1px 1px grey, inset -1px -1px #dfdfdf, inset 1px 1px #0a0a0a;\n        background-size: cover;\n    }\n\n    .character-name-row input {\n        width: 110px;\n    }\n\n    .change-portrait {\n        width: 100%;\n    }\n\n    .shorter-input {\n        width: 32px;\n    }\n\n    #level2,\n    #level3 {\n        margin-left: 1px;\n    }\n\n    .short-input {\n        width: 38px;\n    }\n\n    .long-input {\n        width: 98px;\n    }\n\n    .abilities-row-separator {\n        width: 100%;\n        border: 1px solid black;\n        margin-top: 6px;\n    }\n\n    .tabs {\n        display: flex;\n        flex-direction: row;\n        flex-wrap: nowrap;\n        align-content: flex-start;\n        justify-content: flex-start;\n        align-items: flex-end;\n    }\n\n    .tab-contents {\n        margin-top: -4px;\n        box-shadow: inset -1px -1px #0a0a0a, inset 1px 1px #fff, inset -2px -2px grey, inset 2px 2px #dfdfdf;\n        background-color: silver;\n        height: 264px;\n    }\n\n    .tab {\n        position: relative;\n        display: inline-block;\n        padding: 5px 8px 7px 8px;\n        box-shadow: inset -1px -1px #0a0a0a, inset 1px 1px #fff, inset -2px -2px grey, inset 2px 2px #dfdfdf;\n        border-radius: 3px 2px 0 0;\n        background-color: silver;\n        clip-path: inset(0 0 2px 0);\n        cursor: default;\n        height: 10px;\n        margin-left: -2px;\n        margin-bottom: 2px;\n    }\n\n    .tab:first-child {\n        margin-left: 0;\n    }\n\n    .tab.active {\n        height: 14px;\n        margin-bottom: 0;\n        z-index: 1;\n    }\n\n    .tab-content {\n        display: none;\n        width: 100%;\n        height: 100%;\n    }\n\n    .tab-content.active {\n        display: block;\n    }\n\n    .abilities-column {\n        display: block;\n        float: left;\n        padding: 4px 12px 0 12px;\n    }\n\n    .thieves-column {\n        display: block;\n        float: left;\n        padding: 10px 0;\n        width: 172px;\n    }\n\n    .resistances-column {\n        display: block;\n        float: left;\n        width: 250px;\n        padding: 10px 0 0 12px;\n    }\n\n    .resistances-column .field-row {\n        margin-left: 4px;\n    }\n\n    .resistances-column input {\n        margin-right: 6px;\n    }\n\n    .saving-throws-column {\n        display: block;\n        float: left;\n        width: 205px;\n        padding: 10px 0 0 7px;\n    }\n\n    .saving-throws-column .field-row {\n        margin-left: 4px;\n    }\n\n    .saving-throws-column label {\n        width: 130px;\n    }\n\n    .armour-class-column {\n        display: block;\n        float: left;\n        width: 135px;\n        padding: 10px 0 0 7px;\n    }\n\n    .weapons-proficiencies-column {\n        display: block;\n        float: left;\n        width: 400px;\n        padding: 10px 0 0 12px;\n    }\n\n    .weapons-proficiencies-column label {\n        width: 125px;\n    }\n\n    .weapons-proficiencies-column input {\n        margin-right: 15px;\n    }\n\n    label {\n        min-width: 60px;\n    }\n\n    .long-label {\n        min-width: 80px;\n    }\n\n    .tab-content .field-row {\n        display: inline-flex;\n        margin-top: 6px;\n    }\n\n    .tab-content > .thieves-column .field-row,\n    .tab-content > .stats-column .field-row {\n        margin-left: 4px;\n    }\n\n    .abilities-row div:nth-child(2),\n    .abilities-row div:nth-child(3) {\n        margin-left: 12px;\n    }\n\n    .characteristics-column {\n        display: block;\n        float: left;\n        padding: 4px 12px 0 12px;\n    }\n\n    .stats-column {\n        display: block;\n        float: left;\n        padding: 10px 0;\n        width: 247px;\n    }\n\n    .characteristics-column label {\n        min-width: 83px;\n    }\n\n    .characteristics-column select {\n        min-width: 172px;\n    }\n\n    select:focus {\n        color: black;\n        background-color: white;\n    }\n\n    .character-selector-row {\n        width: 110px;\n        margin-top: 12px;\n    }\n</style>\n","import App from './App.svelte';\n\nconst app = new App({\n\ttarget: document.body,\n\tprops: {\n\t\tversion: '0.2.2'\n\t}\n});\n\nexport default app;"],"names":["noop","run","fn","blank_object","Object","create","run_all","fns","forEach","is_function","thing","safe_not_equal","a","b","append","target","node","appendChild","insert","anchor","insertBefore","detach","parentNode","removeChild","destroy_each","iterations","detaching","i","length","d","element","name","document","createElement","text","data","createTextNode","space","listen","event","handler","options","addEventListener","removeEventListener","attr","attribute","value","removeAttribute","getAttribute","setAttribute","set_data","wholeText","set_style","key","important","style","removeProperty","setProperty","select_option","select","option","__value","selected","selectedIndex","toggle_class","toggle","classList","current_component","set_current_component","component","onMount","Error","get_current_component","$$","on_mount","push","dirty_components","binding_callbacks","render_callbacks","flush_callbacks","resolved_promise","Promise","resolve","update_scheduled","add_render_callback","seen_callbacks","Set","flushidx","flush","saved_component","update","pop","callback","has","add","clear","fragment","before_update","dirty","p","ctx","after_update","outroing","make_dirty","then","fill","init","instance","create_fragment","not_equal","props","append_styles","parent_component","bound","on_destroy","on_disconnect","context","Map","callbacks","skip_bound","root","ready","ret","rest","hydrate","nodes","Array","from","childNodes","children","l","c","intro","block","delete","local","customElement","m","new_on_destroy","map","filter","mount_component","fields","signature","id","offset","size","type","label","version","partyMembersStructOffset","partyMembersStructCount","partyInventoryOffset","partyInventoryCount","nonPartyMembersStructOffset","nonPartyMembersStructCount","globalNamespaceVariablesOffset","globalNamespaceVariablesCount","gameTime","partyGold","partyReputation","characterName","characterCurrentArea","creOffset","creSize","strongestKillName","strongestKillXP","timeInParty","timeJoined","isPartyMember","firstLetterOfCre","chapterKillsXP","chapterKillsCount","gameKillsXP","gameKillsCount","favouriteSpells","favouriteSpellCount","favouriteWeapons","favouriteWeaponTime","creatureFlags","experienceForKill","experiencePoints","goldCarried","permanentStatusFlags","currentHitPoints","maxHitPoints","animation","metalColour","minorColour","majorColour","skinColour","leatherColour","armorColour","hairColour","mediumPortrait","largePortrait","reputation","acNatural","acEffective","acCrushing","acMissile","acPiercing","acSlashing","thac0","attacksPerRound","saveVsDeath","saveVsWands","saveVsPolymorph","saveVsBreath","saveVsSpells","resistFire","resistCold","resistElectricity","resistAcid","resistMagic","resistMagicFire","resistMagicCold","resistSlashing","resistCrushing","resistPiercing","resistMissile","hideInShadows","detectIllusion","setTraps","lockpicking","moveSilently","findDisarmTraps","pickPockets","loreLevel","fatigue","intoxication","luck","turnUndead","trackingSkill","level1","level2","level3","strength","strengthBonus","intelligence","wisdom","dexterity","constitution","charisma","morale","moraleBreak","moraleRecoveryTime","racialEnemy","kit","enemyAlly","general","race","class","gender","alignment","nonPcCharsName","secondsToDhms","seconds","Number","Math","floor","h","GamV20HexEditor","_hexArray","_headerOffset","_partyMembersStructsOffsets","_partyMembersCreOffsets","_partyMembersStatsOffsets","_nonPartyMembersStructsOffsets","_nonPartyMembersCreOffsets","_nonPartyMembersStatsOffsets","_partyMembersProficienciesOffsets","_nonPartyMembersProficienciesOffsets","_isValidGamFile","constructor","uint8array","hexArray","toString","slice","this","_validateGamFile","_locateCharactersOffsets","isValidGamFile","readHeaderField","fieldId","field","_readOffsetValue","readCreField","characterIdx","inParty","offsetStart","readNpcStructField","readCharacterStatField","readCharacterProficiencies","offsets","isArray","proficiencies","iMax","weaponProficiency","proficiencyType","writeHeaderField","newValue","writeCreField","writeNpcStructField","writeCharacterStatField","pattern","proficienciesOffsets","o","oMax","pMax","proficienciesOffsets2","_getIntLittleEndian","parseInt","reverse","join","_getIntBigEndian","_toBinaryString","padStart","_getCharsString","removePadding","hex","String","fromCharCode","bytes","paddingCount","int8","int16","portraits","genders","races","alignments","classes","kits","eas","entries","idx","fileinput","filename","hexEditor","isReady","isLoading","activeTab","current_character_idx","file","localStorage","getItem","JSON","parse","removeItem","onFileSelected","e","files","inputFileName","reader","FileReader","readAsArrayBuffer","onload","res","Uint8Array","result","setItem","stringify","onTabClick","tabIdx","switchCharacter","includes","click","$destroy","destroy_component","$on","index","indexOf","splice","$set","$$props","obj","$$set","keys","body"],"mappings":"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AMqL,EAAY,CACrB,WACA,SACA,WACA,WACA,WACA,WACA,WACA,WACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,UACA,UACA,WACA,UACA,UACA,SACA,SACA,WACA,SACA,UACA,WACA,WACA,WACA,WACA,WACA,SACA,QACA,WACA,QACA,SACA,WACA,UACA,UACA,SACA,QACA,QACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,SACA,UACA,UACA,UACA,WACA,UACA,UACA,SACA,SACA,SACA,UACA,WACA,QACA,WACA,WACA,UACA,UACA,UACA,WACA,UACA,WACA,SACA,UACA,UACA,UACA,UACA,WACA,UACA,WACA,QACA,QACA,QACA,UACA,WACA,WACA,WACA,UACA,UACA,UACA,OACA,QACA,WACA,YACA,YACA,YACA,YACA,YACA,YACA,WACA,WACA,WACA,WACA,WACA,YC3GSC,EAAU,CACnB,EAAG,OACH,EAAG,SACH,EAAG,QACH,EAAG,UACH,EAAG,OACH,EAAG,WACH,EAAG,cACH,EAAG,QACH,EAAG,iBACH,GAAI,SACJ,GAAI,SACJ,GAAI,SACJ,GAAI,SACJ,GAAI,SACJ,GAAI,SACJ,GAAI,SACJ,GAAI,SACJ,GAAI,UACJ,GAAI,uBCnBKC,EAAQ,CACjB,EAAG,QACH,EAAG,MACH,EAAG,WACH,EAAG,QACH,EAAG,WACH,EAAG,QACH,EAAG,UACH,IAAK,SACL,IAAK,WACL,IAAK,OACL,IAAK,iBACL,IAAK,MACL,IAAK,eACL,IAAK,WACL,IAAK,QACL,IAAK,aACL,IAAK,QACL,IAAK,YACL,IAAK,SACL,IAAK,OACL,IAAK,WACL,IAAK,SACL,IAAK,OACL,IAAK,SACL,IAAK,QACL,IAAK,QACL,IAAK,UACL,IAAK,cACL,IAAK,WACL,IAAK,cACL,IAAK,UACL,IAAK,UACL,IAAK,SACL,IAAK,WACL,IAAK,QACL,IAAK,YACL,IAAK,WACL,IAAK,SACL,IAAK,UACL,IAAK,SACL,IAAK,UACL,IAAK,OACL,IAAK,MACL,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"}